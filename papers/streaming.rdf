<rdf:RDF
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns:z="http://www.zotero.org/namespaces/export#"
 xmlns:dcterms="http://purl.org/dc/terms/"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:bib="http://purl.org/net/biblio#"
 xmlns:vcard="http://nwalsh.com/rdf/vCard#"
 xmlns:foaf="http://xmlns.com/foaf/0.1/"
 xmlns:link="http://purl.org/rss/1.0/modules/link/"
 xmlns:prism="http://prismstandard.org/namespaces/1.2/basic/">
    <rdf:Description rdf:about="urn:isbn:978-1-4503-2758-9">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-2758-9</dc:identifier>
                <dc:identifier>DOI 10.1145/2723372.2746485</dc:identifier>
                <dc:title>Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data - SIGMOD '15</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                        <vcard:locality>Melbourne, Victoria, Australia</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lin</foaf:surname>
                        <foaf:givenName>Qian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ooi</foaf:surname>
                        <foaf:givenName>Beng Chin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Zhengkui</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yu</foaf:surname>
                        <foaf:givenName>Cui</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_24"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2723372.2746485</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>811-825</bib:pages>
        <dc:date>2015</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:29:31</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2015 ACM SIGMOD International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Eﬃcient and scalable stream joins play an important role in performing real-time analytics for many cloud applications. However, like in conventional database processing, online theta-joins over data streams are computationally expensive and moreover, being memory-based processing, they impose high memory requirement on the system. In this paper, we propose a novel stream join model, called join-biclique, which organizes a large cluster as a complete bipartite graph. Join-biclique has several strengths over state-of-the-art techniques, including memory-eﬃciency, elasticity and scalability. These features are essential for building eﬃcient and scalable streaming systems. Based on join-biclique, we develop a scalable distributed stream join system, BiStream, over a large-scale commodity cluster. Speciﬁcally, BiStream is designed to support eﬃcient full-history joins, windowbased joins and online data aggregation. BiStream also supports adaptive resource management to dynamically scale out and down the system according to its application workloads. We provide both theoretical cost analysis and extensive experimental evaluations to evaluate the eﬃciency, elasticity and scalability of BiStream.</dcterms:abstract>
        <dc:title>Scalable Distributed Stream Join Processing</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_24">
        <z:itemType>attachment</z:itemType>
        <dc:title>Lin 等。 - 2015 - Scalable Distributed Stream Join Processing.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-0-7803-7665-6">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-0-7803-7665-6</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2003.1260779</dc:identifier>
                <dc:title>Proceedings 19th International Conference on Data Engineering (Cat. No.03CH37405)</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Bangalore, India</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Shah</foaf:surname>
                        <foaf:givenName>M.A.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Hellerstein</foaf:surname>
                        <foaf:givenName>J.M.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                       <foaf:surname>Sirish Chandrasekaran</foaf:surname>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Franklin</foaf:surname>
                        <foaf:givenName>M.J.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_25"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/1260779/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>25-36</bib:pages>
        <dc:date>2003</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:29:19</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>19th International Conference on Data Engineering</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>The long-running nature of continuous queries poses new scalability challenges for dataﬂow processing. CQ systems execute pipelined dataﬂows that may be shared across multiple queries. The scalability of these dataﬂows is limited by their constituent, stateful operators – e.g. windowed joins or grouping operators. To scale such operators, a natural solution is to partition them across a shared-nothing platform. But in the CQ context, traditional, static techniques for partitioned parallelism can exhibit detrimental imbalances as workload and runtime conditions evolve. Longrunning CQ dataﬂows must continue to function robustly in the face of these imbalances.</dcterms:abstract>
        <dc:title>Flux: an adaptive partitioning operator for continuous query systems</dc:title>
        <z:shortTitle>Flux</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_25">
        <z:itemType>attachment</z:itemType>
        <dc:title>Shah 等。 - 2003 - Flux an adaptive partitioning operator for contin.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=2735508.2735514">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf rdf:resource="urn:issn:21508097"/>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Taft</foaf:surname>
                        <foaf:givenName>Rebecca</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Mansour</foaf:surname>
                        <foaf:givenName>Essam</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Serafini</foaf:surname>
                        <foaf:givenName>Marco</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Duggan</foaf:surname>
                        <foaf:givenName>Jennie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Elmore</foaf:surname>
                        <foaf:givenName>Aaron J.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Aboulnaga</foaf:surname>
                        <foaf:givenName>Ashraf</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Pavlo</foaf:surname>
                        <foaf:givenName>Andrew</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Stonebraker</foaf:surname>
                        <foaf:givenName>Michael</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_26"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2735508.2735514</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>245-256</bib:pages>
        <dc:date>2014-11-01</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:29:14</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>On-line transaction processing (OLTP) database management systems (DBMSs) often serve time-varying workloads due to daily, weekly or seasonal ﬂuctuations in demand, or because of rapid growth in demand due to a company’s business success. In addition, many OLTP workloads are heavily skewed to “hot” tuples or ranges of tuples. For example, the majority of NYSE volume involves only 40 stocks. To deal with such ﬂuctuations, an OLTP DBMS needs to be elastic; that is, it must be able to expand and contract resources in response to load ﬂuctuations and dynamically balance load as hot tuples vary over time.</dcterms:abstract>
        <dc:title>E-store: fine-grained elastic partitioning for distributed transaction processing systems</dc:title>
        <z:shortTitle>E-store</z:shortTitle>
    </bib:Article>
    <bib:Journal rdf:about="urn:issn:21508097">
        <prism:volume>8</prism:volume>
        <prism:number>3</prism:number>
        <dc:title>Proceedings of the VLDB Endowment</dc:title>
        <dc:identifier>ISSN 21508097</dc:identifier>
        <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
        <dc:identifier>DOI 10.14778/2735508.2735514</dc:identifier>
    </bib:Journal>
    <z:Attachment rdf:about="#item_26">
        <z:itemType>attachment</z:itemType>
        <dc:title>Taft 等。 - 2014 - E-store fine-grained elastic partitioning for dis.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-0-7695-2285-2">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-0-7695-2285-2</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2005.53</dc:identifier>
                <dc:title>21st International Conference on Data Engineering (ICDE'05)</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Tokyo, Japan</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <link:link rdf:resource="#item_27"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/1410193/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>791-802</bib:pages>
        <dc:date>2005</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:28:32</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>21st International Conference on Data Engineering (ICDE'05)</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Distributed and parallel computing environments are becoming cheap and commonplace. The availability of large numbers of CPU’s makes it possible to process more data at higher speeds. Stream-processing systems are also becoming more important, as broad classes of applications require results in real-time.</dcterms:abstract>
        <dc:title>Dynamic Load Distribution in the Borealis Stream Processor</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_27">
        <z:itemType>attachment</z:itemType>
        <dc:title>Ying Xing 等。 - 2005 - Dynamic Load Distribution in the Borealis Stream P.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-5090-2020-1">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-5090-2020-1</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2016.7498273</dc:identifier>
                <dc:title>2016 IEEE 32nd International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Helsinki, Finland</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Nasir</foaf:surname>
                        <foaf:givenName>Muhammad Anis Uddin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Morales</foaf:surname>
                        <foaf:givenName>Gianmarco De Francisci</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kourtellis</foaf:surname>
                        <foaf:givenName>Nicolas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Serafini</foaf:surname>
                        <foaf:givenName>Marco</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_28"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/7498273/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>589-600</bib:pages>
        <dc:date>5/2016</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:28:26</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>2016 IEEE 32nd International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Carefully balancing load in distributed stream processing systems has a fundamental impact on execution latency and throughput. Load balancing is challenging because real-world workloads are skewed: some tuples in the stream are associated to keys which are signiﬁcantly more frequent than others. Skew is remarkably more problematic in large deployments: having more workers implies fewer keys per worker, so it becomes harder to “average out” the cost of hot keys with cold keys.</dcterms:abstract>
        <dc:title>When two choices are not enough: Balancing at scale in Distributed Stream Processing</dc:title>
        <z:shortTitle>When two choices are not enough</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_28">
        <z:itemType>attachment</z:itemType>
        <dc:title>Nasir 等。 - 2016 - When two choices are not enough Balancing at scal.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4799-7964-6">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4799-7964-6</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2015.7113279</dc:identifier>
                <dc:title>2015 IEEE 31st International Conference on Data Engineering</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Seoul, South Korea</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Nasir</foaf:surname>
                        <foaf:givenName>Muhammad Anis Uddin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>De Francisci Morales</foaf:surname>
                        <foaf:givenName>Gianmarco</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Garcia-Soriano</foaf:surname>
                        <foaf:givenName>David</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kourtellis</foaf:surname>
                        <foaf:givenName>Nicolas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Serafini</foaf:surname>
                        <foaf:givenName>Marco</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_29"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/7113279/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>137-148</bib:pages>
        <dc:date>4/2015</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:28:22</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>2015 IEEE 31st International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>We study the problem of load balancing in distributed stream processing engines, which is exacerbated in the presence of skew. We introduce PARTIAL KEY GROUPING (PKG), a new stream partitioning scheme that adapts the classical “power of two choices” to a distributed streaming setting by leveraging two novel techniques: key splitting and local load estimation. In so doing, it achieves better load balancing than key grouping while being more scalable than shufﬂe grouping.</dcterms:abstract>
        <dc:title>The power of both choices: Practical load balancing for distributed stream processing engines</dc:title>
        <z:shortTitle>The power of both choices</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_29">
        <z:itemType>attachment</z:itemType>
        <dc:title>Nasir 等。 - 2015 - The power of both choices Practical load balancin.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-3531-7">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-3531-7</dc:identifier>
                <dc:identifier>DOI 10.1145/2882903.2882943</dc:identifier>
                <dc:title>Proceedings of the 2016 International Conference on Management of Data - SIGMOD '16</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                        <vcard:locality>San Francisco, California, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kalyvianaki</foaf:surname>
                        <foaf:givenName>Evangelia</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fiscato</foaf:surname>
                        <foaf:givenName>Marco</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Salonidis</foaf:surname>
                        <foaf:givenName>Theodoros</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Pietzuch</foaf:surname>
                        <foaf:givenName>Peter</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_30"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2882903.2882943</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>541-553</bib:pages>
        <dc:date>2016</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:28:18</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2016 International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Federated stream processing systems, which utilise nodes from multiple independent domains, can be found increasingly in multi-provider cloud deployments, internet-of-things systems, collaborative sensing applications and large-scale grid systems. To pool resources from several sites and take advantage of local processing, submitted queries are split into query fragments, which are executed collaboratively by different sites. When supporting many concurrent users, however, queries may exhaust available processing resources, thus requiring constant load shedding. Given that individual sites have autonomy over how they allocate query fragments on their nodes, it is an open challenge how to ensure global fairness on processing quality experienced by queries in a federated scenario.</dcterms:abstract>
        <dc:title>THEMIS: Fairness in Federated Stream Processing under Overload</dc:title>
        <z:shortTitle>THEMIS</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_30">
        <z:itemType>attachment</z:itemType>
        <dc:title>Kalyvianaki 等。 - 2016 - THEMIS Fairness in Federated Stream Processing un.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="https://ieeexplore.ieee.org/document/8691781/">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf rdf:resource="urn:issn:1045-9219,%201558-2183,%202161-9883"/>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liao</foaf:surname>
                        <foaf:givenName>Xiaofei</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Huang</foaf:surname>
                        <foaf:givenName>Yu</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zheng</foaf:surname>
                        <foaf:givenName>Long</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jin</foaf:surname>
                        <foaf:givenName>Hai</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_31"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://ieeexplore.ieee.org/document/8691781/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>2165-2178</bib:pages>
        <dc:date>2019-10-1</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:27:29</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Time-evolving stream datasets exist ubiquitously in many real-world applications where their inherent hot keys often evolve over times. Nevertheless, few existing solutions can provide efﬁcient load balancing on these time-evolving datasets while preserving low memory overhead. In this paper, we present a novel load balancing mechanism (named FISH), which can provide the efﬁcient time-evolving stream processing at scale through recent hot keys identiﬁcation and worker assignment. The key insight of this work is that the keys of time-evolving stream data can have a skewed distribution within the bounded distance of time interval. This enables to accurately identify the recent hot keys for the real-time load balancing within a bounded scope. We therefore propose an epoch-based recent hot key identiﬁcation with specialized intra-epoch frequency counting (for maintaining low memory overhead) and inter-epoch hotness decaying (for suppressing superﬂuous computation). We also propose to heuristically infer the accurate information of remote workers through computation rather than communication for cost-efﬁcient worker assignment. We have integrated our approach into Apache Storm. Our results on a cluster of 128 nodes for both synthetic and real-world stream datasets show that FISH signiﬁcantly outperforms state-of-the-arts with the average and the 99th percentile latency reduction by 87.12% and 76.34% (vs. W-Choices), and memory overhead reduction by 96.66% (vs. Shufﬂe Grouping).</dcterms:abstract>
        <dc:title>Efficient Time-Evolving Stream Processing at Scale</dc:title>
    </bib:Article>
    <bib:Journal rdf:about="urn:issn:1045-9219,%201558-2183,%202161-9883">
        <prism:volume>30</prism:volume>
        <prism:number>10</prism:number>
        <dc:title>IEEE Transactions on Parallel and Distributed Systems</dc:title>
        <dc:identifier>ISSN 1045-9219, 1558-2183, 2161-9883</dc:identifier>
        <dcterms:alternative>IEEE Trans. Parallel Distrib. Syst.</dcterms:alternative>
        <dc:identifier>DOI 10.1109/TPDS.2019.2911495</dc:identifier>
    </bib:Journal>
    <z:Attachment rdf:about="#item_31">
        <z:itemType>attachment</z:itemType>
        <dc:title>Liao 等。 - 2019 - Efficient Time-Evolving Stream Processing at Scale.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=3137628.3137639">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>10</prism:volume>
                <prism:number>11</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3137628.3137639</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Katsipoulakis</foaf:surname>
                        <foaf:givenName>Nikos R.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Labrinidis</foaf:surname>
                        <foaf:givenName>Alexandros</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Chrysanthis</foaf:surname>
                        <foaf:givenName>Panos K.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_32"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3137628.3137639</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1286-1297</bib:pages>
        <dc:date>2017-08-01</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:27:02</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Stream processing has become the dominant processing model for monitoring and real-time analytics. Modern Parallel Stream Processing Engines (pSPEs) have made it feasible to increase the performance in both monitoring and analytical queries by parallelizing a query’s execution and distributing the load on multiple workers. A determining factor for the performance of a pSPE is the partitioning algorithm used to disseminate tuples to workers. Until now, partitioning methods in pSPEs have been similar to the ones used in parallel databases and only recently load-aware algorithms have been employed to improve the effectiveness of parallel execution.</dcterms:abstract>
        <dc:title>A holistic view of stream partitioning costs</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_32">
        <z:itemType>attachment</z:itemType>
        <dc:title>Katsipoulakis 等。 - 2017 - A holistic view of stream partitioning costs.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=3137765.3137786">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>10</prism:volume>
                <prism:number>12</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3137765.3137786</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Floratou</foaf:surname>
                        <foaf:givenName>Avrilia</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Agrawal</foaf:surname>
                        <foaf:givenName>Ashvin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Graham</foaf:surname>
                        <foaf:givenName>Bill</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rao</foaf:surname>
                        <foaf:givenName>Sriram</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ramasamy</foaf:surname>
                        <foaf:givenName>Karthik</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_33"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3137765.3137786</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1825-1836</bib:pages>
        <dc:date>2017-08-01</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:26:24</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>In recent years, there has been an explosion of large-scale realtime analytics needs and a plethora of streaming systems have been developed to support such applications. These systems are able to continue stream processing even when faced with hardware and software failures. However, these systems do not address some crucial challenges facing their operators: the manual, time-consuming and error-prone tasks of tuning various conﬁguration knobs to achieve service level objectives (SLO) as well as the maintenance of SLOs in the face of sudden, unpredictable load variation and hardware or software performance degradation.</dcterms:abstract>
        <dc:title>Dhalion: self-regulating stream processing in heron</dc:title>
        <z:shortTitle>Dhalion</z:shortTitle>
    </bib:Article>
    <z:Attachment rdf:about="#item_33">
        <z:itemType>attachment</z:itemType>
        <dc:title>Floratou 等。 - 2017 - Dhalion self-regulating stream processing in hero.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_15">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kalavri</foaf:surname>
                        <foaf:givenName>Vasiliki</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liagouris</foaf:surname>
                        <foaf:givenName>John</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Hoffmann</foaf:surname>
                        <foaf:givenName>Moritz</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Dimitrova</foaf:surname>
                        <foaf:givenName>Desislava</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Forshaw</foaf:surname>
                        <foaf:givenName>Matthew</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Roscoe</foaf:surname>
                        <foaf:givenName>Timothy</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_34"/>
        <bib:pages>17</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Streaming computations are by nature long-running, and their workloads can change in unpredictable ways. This in turn means that maintaining performance may require dynamic scaling of allocated computational resources.</dcterms:abstract>
        <dc:title>Three steps is all you need: fast, accurate, automatic scaling decisions for distributed streaming dataﬂows</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_34">
        <z:itemType>attachment</z:itemType>
        <dc:title>Kalavri 等。 - Three steps is all you need fast, accurate, autom.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="#item_21">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal><dc:title>PhD@ VLDB</dc:title></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Del Monte</foaf:surname>
                        <foaf:givenName>Bonaventura</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_40"/>
        <dc:date>2017</dc:date>
        <z:libraryCatalog>Google Scholar</z:libraryCatalog>
        <dc:title>Efficient Migration of Very Large Distributed State for Scalable Stream Processing.</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_40">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://pdfs.semanticscholar.org/f132/27a7bb10e040c60ea7585ede64653ca55424.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-08-27 01:10:32</dcterms:dateSubmitted>
        <dc:title>Full Text</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_22">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
               <dc:title>arXiv preprint arXiv:1501.03619</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ding</foaf:surname>
                        <foaf:givenName>Jianbing</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fu</foaf:surname>
                        <foaf:givenName>Tom ZJ</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ma</foaf:surname>
                        <foaf:givenName>Richard TB</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Winslett</foaf:surname>
                        <foaf:givenName>Marianne</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yang</foaf:surname>
                        <foaf:givenName>Yin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Zhenjie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Chao</foaf:surname>
                        <foaf:givenName>Hongyang</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_42"/>
        <link:link rdf:resource="#item_41"/>
        <dc:date>2015</dc:date>
        <z:libraryCatalog>Google Scholar</z:libraryCatalog>
        <dc:title>Optimal operator state migration for elastic data stream processing</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_42">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/pdf/1501.03619</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-08-26 13:21:35</dcterms:dateSubmitted>
        <dc:title>Full Text</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <z:Attachment rdf:about="#item_41">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/abs/1501.03619</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-08-26 13:21:39</dcterms:dateSubmitted>
        <dc:title>Snapshot</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_23">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>22</prism:volume>
                <prism:number>11</prism:number>
                <dc:title>IEEE Transactions on Parallel and Distributed Systems</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Feng</foaf:surname>
                        <foaf:givenName>Yi-Hsuan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Huang</foaf:surname>
                        <foaf:givenName>Nen-Fu</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wu</foaf:surname>
                        <foaf:givenName>Yen-Min</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_43"/>
        <bib:pages>1788–1796</bib:pages>
        <dc:date>2011</dc:date>
        <z:libraryCatalog>Google Scholar</z:libraryCatalog>
        <dc:title>Efficient and adaptive stateful replication for stream processing engines in high-availability cluster</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_43">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://ieeexplore.ieee.org/abstract/document/5733339/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-08-26 13:20:04</dcterms:dateSubmitted>
        <dc:title>Snapshot</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_44">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>1</prism:volume>
                <prism:number>1</prism:number>
                <dc:title>ACM Computing Surveys</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liu</foaf:surname>
                        <foaf:givenName>Xunyun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Buyya</foaf:surname>
                        <foaf:givenName>Rajkumar</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_45"/>
        <bib:pages>40</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dc:title>Resource Management and Scheduling in Distributed Stream Processing Systems: A Taxonomy, Review and Future Directions</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_45">
        <z:itemType>attachment</z:itemType>
        <dc:title>Liu 和 Buyya - Resource Management and Scheduling in Distributed .pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-58113-859-7">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-58113-859-7</dc:identifier>
                <dc:identifier>DOI 10.1145/1007568.1007617</dc:identifier>
                <dc:title>Proceedings of the 2004 ACM SIGMOD international conference on Management of data  - SIGMOD '04</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Paris, France</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhu</foaf:surname>
                        <foaf:givenName>Yali</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rundensteiner</foaf:surname>
                        <foaf:givenName>Elke A.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Heineman</foaf:surname>
                        <foaf:givenName>George T.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_49"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://portal.acm.org/citation.cfm?doid=1007568.1007617</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>431</bib:pages>
        <dc:date>2004</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:48:49</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2004 ACM SIGMOD international conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Dynamic plan migration is concerned with the on-the-ﬂy transition from one continuous query plan to a semantically equivalent yet more eﬃcient plan. Migration is important for stream monitoring systems where long-running queries may have to withstand ﬂuctuations in stream workloads and data characteristics. Existing migration methods generally adopt a pause-drain-resume strategy that pauses the processing of new data, purges all old data in the existing plan, until ﬁnally the new plan can be plugged into the system. However, these existing strategies do not address the problem of migrating query plans that contain stateful operators, such as joins. We now develop solutions for online plan migration for continuous stateful plans. In particular, in this paper, we propose two alternative strategies, called the moving state strategy and the parallel track strategy, one exploiting reusability and the second employs parallelism to seamlessly migrate between continuous join plans without aﬀecting the results of the query. We develop cost models for both migration strategies to analytically compare them. We embed these migration strategies into the CAPE [7], a prototype system of a stream query engine, and conduct a comparative experimental study to evaluate these two strategies for window-based join plans. Our experimental results illustrate that the two strategies can vary signiﬁcantly in terms of output rates and intermediate storage spaces given distinct system conﬁgurations and stream workloads.</dcterms:abstract>
        <dc:title>Dynamic plan migration for continuous queries over data streams</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_49">
        <z:itemType>attachment</z:itemType>
        <dc:title>Zhu 等。 - 2004 - Dynamic plan migration for continuous queries over.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="http://ieeexplore.ieee.org/document/7113328/">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4799-7964-6</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2015.7113328</dc:identifier>
                <dc:title>2015 IEEE 31st International Conference on Data Engineering</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Seoul, South Korea</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wu</foaf:surname>
                        <foaf:givenName>Yingjun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Tan</foaf:surname>
                        <foaf:givenName>Kian-Lee</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_50"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/7113328/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>723-734</bib:pages>
        <dc:date>4/2015</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:48:40</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>2015 IEEE 31st International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>We introduce ChronoStream, a distributed system speciﬁcally designed for elastic stateful stream computation in the cloud. ChronoStream treats internal state as a ﬁrst-class citizen and aims at providing ﬂexible elastic support in both vertical and horizontal dimensions to cope with workload ﬂuctuation and dynamic resource reclamation. With a clear separation between application-level computation parallelism and OS-level execution concurrency, ChronoStream enables transparent dynamic scaling and failure recovery by eliminating any network I/O and statesynchronization overhead. Our evaluation on dozens of computing nodes shows that ChronoStream can scale linearly and achieve transparent elasticity and high availability without sacriﬁcing system performance or affecting collocated tenants.</dcterms:abstract>
        <dc:title>ChronoStream: Elastic stateful stream computation in the cloud</dc:title>
        <z:shortTitle>ChronoStream</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_50">
        <z:itemType>attachment</z:itemType>
        <dc:title>Wu 和 Tan - 2015 - ChronoStream Elastic stateful stream computation .pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=3303753.3316441">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>12</prism:volume>
                <prism:number>5</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3303753.3303758</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zeuch</foaf:surname>
                        <foaf:givenName>Steffen</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Monte</foaf:surname>
                        <foaf:givenName>Bonaventura Del</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Karimov</foaf:surname>
                        <foaf:givenName>Jeyhun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lutz</foaf:surname>
                        <foaf:givenName>Clemens</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Renz</foaf:surname>
                        <foaf:givenName>Manuel</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Traub</foaf:surname>
                        <foaf:givenName>Jonas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Breß</foaf:surname>
                        <foaf:givenName>Sebastian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rabl</foaf:surname>
                        <foaf:givenName>Tilmann</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_51"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3303753.3316441</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>516-530</bib:pages>
        <dc:date>2019-01-01</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:48:31</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Modern Stream Processing Engines (SPEs) process large data volumes under tight latency constraints. Many SPEs execute processing pipelines using message passing on sharednothing architectures and apply a partition-based scale-out strategy to handle high-velocity input streams. Furthermore, many state-of-the-art SPEs rely on a Java Virtual Machine to achieve platform independence and speed up system development by abstracting from the underlying hardware. In this paper, we show that taking the underlying hardware into account is essential to exploit modern hardware eﬃciently. To this end, we conduct an extensive experimental analysis of current SPEs and SPE design alternatives optimized for modern hardware. Our analysis highlights potential bottlenecks and reveals that state-of-the-art SPEs are not capable of fully exploiting current and emerging hardware trends, such as multi-core processors and high-speed networks. Based on our analysis, we describe a set of design changes to the common architecture of SPEs to scale-up on modern hardware. We show that the single-node throughput can be increased by up to two orders of magnitude compared to state-of-the-art SPEs by applying specialized code generation, fusing operators, batch-style parallelization strategies, and optimized windowing. This speedup allows for deploying typical streaming applications on a single or a few nodes instead of large clusters.</dcterms:abstract>
        <dc:title>Analyzing efficient stream processing on modern hardware</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_51">
        <z:itemType>attachment</z:itemType>
        <dc:title>Zeuch 等。 - 2019 - Analyzing efficient stream processing on modern ha.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-5643-5">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-5643-5</dc:identifier>
                <dc:identifier>DOI 10.1145/3299869.3319868</dc:identifier>
                <dc:title>Proceedings of the 2019 International Conference on Management of Data  - SIGMOD '19</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Amsterdam, Netherlands</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Li</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fu</foaf:surname>
                        <foaf:givenName>Tom Z. J.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ma</foaf:surname>
                        <foaf:givenName>Richard T. B.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Winslett</foaf:surname>
                        <foaf:givenName>Marianne</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Zhenjie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_80"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3299869.3319868</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>573-588</bib:pages>
        <dc:date>2019</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:51:14</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2019 International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Elasticity is highly desirable for stream processing systems to guarantee low latency against workload dynamics, such as surges in data arrival rate and fluctuations in data distribution. Existing systems achieve elasticity following a resource-centric approach that dynamically repartitions keys across the parallel instances, i.e. executors, to balance the workload and scale operators. However, such operator-level key repartitioning introduces global synchronization and prohibits rapid elasticity. To address this problem, we propose an executor-centric approach, whose core idea is to avoid operator-level key repartitioning while implementing each executor as the building block of elasticity. Following this new approach, we design the Elasticutor framework with two level of optimizations: i) a novel implementation of executors, i.e., elastic executors, that perform elastic multi-core execution via efficient intra-executor load balancing and executor scaling and ii) a global model-based scheduler that dynamically allocates CPU cores to executors based on the instantaneous workloads. We implemented a prototype of Elasticutor and conducted extensive experiments. The results show that Elasticutor doubles the throughput and achieves up to two orders of magnitude lower latency than previous methods for dynamic workloads of real-world applications.</dcterms:abstract>
        <dc:title>Elasticutor: Rapid Elasticity for Realtime Stateful Stream Processing</dc:title>
        <z:shortTitle>Elasticutor</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_80">
        <z:itemType>attachment</z:itemType>
        <dc:title>Wang 等。 - 2019 - Elasticutor Rapid Elasticity for Realtime Statefu.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="http://dl.acm.org/citation.cfm?doid=3299869.3319868">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-5643-5</dc:identifier>
                <dc:identifier>DOI 10.1145/3299869.3319868</dc:identifier>
                <dc:title>Proceedings of the 2019 International Conference on Management of Data  - SIGMOD '19</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Amsterdam, Netherlands</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Li</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fu</foaf:surname>
                        <foaf:givenName>Tom Z. J.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ma</foaf:surname>
                        <foaf:givenName>Richard T. B.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Winslett</foaf:surname>
                        <foaf:givenName>Marianne</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Zhenjie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_81"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3299869.3319868</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>573-588</bib:pages>
        <dc:date>2019</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:51:10</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2019 International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Elasticity is highly desirable for stream processing systems to guarantee low latency against workload dynamics, such as surges in data arrival rate and fluctuations in data distribution. Existing systems achieve elasticity following a resource-centric approach that dynamically repartitions keys across the parallel instances, i.e. executors, to balance the workload and scale operators. However, such operator-level key repartitioning introduces global synchronization and prohibits rapid elasticity. To address this problem, we propose an executor-centric approach, whose core idea is to avoid operator-level key repartitioning while implementing each executor as the building block of elasticity. Following this new approach, we design the Elasticutor framework with two level of optimizations: i) a novel implementation of executors, i.e., elastic executors, that perform elastic multi-core execution via efficient intra-executor load balancing and executor scaling and ii) a global model-based scheduler that dynamically allocates CPU cores to executors based on the instantaneous workloads. We implemented a prototype of Elasticutor and conducted extensive experiments. The results show that Elasticutor doubles the throughput and achieves up to two orders of magnitude lower latency than previous methods for dynamic workloads of real-world applications.</dcterms:abstract>
        <dc:title>Elasticutor: Rapid Elasticity for Realtime Stateful Stream Processing</dc:title>
        <z:shortTitle>Elasticutor</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_81">
        <z:itemType>attachment</z:itemType>
        <dc:title>Wang 等。 - 2019 - Elasticutor Rapid Elasticity for Realtime Statefu.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-5085-3">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-5085-3</dc:identifier>
                <dc:identifier>DOI 10.1145/3132747.3132750</dc:identifier>
                <dc:title>Proceedings of the 26th Symposium on Operating Systems Principles  - SOSP '17</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Shanghai, China</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Venkataraman</foaf:surname>
                        <foaf:givenName>Shivaram</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Panda</foaf:surname>
                        <foaf:givenName>Aurojit</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ousterhout</foaf:surname>
                        <foaf:givenName>Kay</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Armbrust</foaf:surname>
                        <foaf:givenName>Michael</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ghodsi</foaf:surname>
                        <foaf:givenName>Ali</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Franklin</foaf:surname>
                        <foaf:givenName>Michael J.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Recht</foaf:surname>
                        <foaf:givenName>Benjamin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Stoica</foaf:surname>
                        <foaf:givenName>Ion</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_82"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3132747.3132750</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>374-389</bib:pages>
        <dc:date>2017</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:51:07</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 26th Symposium</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Large scale streaming systems aim to provide high throughput and low latency. They are often used to run mission-critical applications, and must be available 24x7. Thus such systems need to adapt to failures and inherent changes in workloads, with minimal impact on latency and throughput. Unfortunately, existing solutions require operators to choose between achieving low latency during normal operation and incurring minimal impact during adaptation. Continuous operator streaming systems, such as Naiad and Flink, provide low latency during normal execution but incur high overheads during adaptation (e.g., recovery), while micro-batch systems, such as Spark Streaming and FlumeJava, adapt rapidly at the cost of high latency during normal operations. Our key observation is that while streaming workloads require millisecond-level processing, workload and cluster properties change less frequently. Based on this, we develop Drizzle, a system that decouples the processing interval from the coordination interval used for fault tolerance and adaptability. Our experiments on a 128 node EC2 cluster show that on the Yahoo Streaming Benchmark, Drizzle can achieve endto-end record processing latencies of less than 100ms and can get 2–3x lower latency than Spark. Drizzle also exhibits better adaptability, and can recover from failures 4x faster than Flink while having up to 13x lower latency during recovery.</dcterms:abstract>
        <dc:title>Drizzle: Fast and Adaptable Stream Processing at Scale</dc:title>
        <z:shortTitle>Drizzle</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_82">
        <z:itemType>attachment</z:itemType>
        <dc:title>Venkataraman 等。 - 2017 - Drizzle Fast and Adaptable Stream Processing at S.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="https://linkinghub.elsevier.com/retrieve/pii/S1084804517303971">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf rdf:resource="urn:issn:10848045"/>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Dias de Assunção</foaf:surname>
                        <foaf:givenName>Marcos</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>da Silva Veith</foaf:surname>
                        <foaf:givenName>Alexandre</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Buyya</foaf:surname>
                        <foaf:givenName>Rajkumar</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_83"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://linkinghub.elsevier.com/retrieve/pii/S1084804517303971</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1-17</bib:pages>
        <dc:date>02/2018</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:51:03</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Under several emerging application scenarios, such as in smart cities, operational monitoring of large infrastructure, wearable assistance, and Internet of Things, continuous data streams must be processed under very short delays. Several solutions, including multiple software engines, have been developed for processing unbounded data streams in a scalable and eﬃcient manner. More recently, architecture has been proposed to use edge computing for data stream processing. This paper surveys state of the art on stream processing engines and mechanisms for exploiting resource elasticity features of cloud computing in stream processing. Resource elasticity allows for an application or service to scale out/in according to ﬂuctuating demands. Although such features have been extensively investigated for enterprise applications, stream processing poses challenges on achieving elastic systems that can make eﬃcient resource management decisions based on current load. Elasticity becomes even more challenging in highly distributed environments comprising edge and cloud computing resources. This work examines some of these challenges and discusses solutions proposed in the literature to address them.</dcterms:abstract>
        <dc:title>Distributed data stream processing and edge computing: A survey on resource elasticity and future directions</dc:title>
        <z:shortTitle>Distributed data stream processing and edge computing</z:shortTitle>
    </bib:Article>
    <bib:Journal rdf:about="urn:issn:10848045">
        <prism:volume>103</prism:volume>
        <dc:title>Journal of Network and Computer Applications</dc:title>
        <dc:identifier>ISSN 10848045</dc:identifier>
        <dcterms:alternative>Journal of Network and Computer Applications</dcterms:alternative>
        <dc:identifier>DOI 10.1016/j.jnca.2017.12.001</dc:identifier>
    </bib:Journal>
    <z:Attachment rdf:about="#item_83">
        <z:itemType>attachment</z:itemType>
        <dc:title>Dias de Assunção 等。 - 2018 - Distributed data stream processing and edge comput.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=2732977.2732989">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>7</prism:volume>
                <prism:number>12</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/2732977.2732989</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kellaris</foaf:surname>
                        <foaf:givenName>Georgios</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Papadopoulos</foaf:surname>
                        <foaf:givenName>Stavros</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Xiao</foaf:surname>
                        <foaf:givenName>Xiaokui</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Papadias</foaf:surname>
                        <foaf:givenName>Dimitris</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_84"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2732977.2732989</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1155-1166</bib:pages>
        <dc:date>2014-08-01</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:51:00</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Numerous applications require continuous publication of statistics for monitoring purposes, such as real-time trafﬁc analysis, timely disease outbreak discovery, and social trends observation. These statistics may be derived from sensitive user data and, hence, necessitate privacy preservation. A notable paradigm for offering strong privacy guarantees in statistics publishing is ϵ-differential privacy. However, there is limited literature that adapts this concept to settings where the statistics are computed over an inﬁnite stream of “events” (i.e., data items generated by the users), and published periodically. These works aim at hiding a single event over the entire stream. We argue that, in most practical scenarios, sensitive information is revealed from multiple events occurring at contiguous time instances. Towards this end, we put forth the novel notion of w-event privacy over inﬁnite streams, which protects any event sequence occurring in w successive time instants. We ﬁrst formulate our privacy concept, motivate its importance, and introduce a methodology for achieving it. We next design two instantiations, whose utility is independent of the stream length. Finally, we conﬁrm the practicality of our solutions experimenting with real data.</dcterms:abstract>
        <dc:title>Differentially private event sequences over infinite streams</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_84">
        <z:itemType>attachment</z:itemType>
        <dc:title>Kellaris 等。 - 2014 - Differentially private event sequences over infini.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_59">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>12</prism:volume>
                <prism:number>5</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3303753.3303758</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zeuch</foaf:surname>
                        <foaf:givenName>Steffen</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Monte</foaf:surname>
                        <foaf:givenName>Bonaventura Del</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Karimov</foaf:surname>
                        <foaf:givenName>Jeyhun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lutz</foaf:surname>
                        <foaf:givenName>Clemens</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Renz</foaf:surname>
                        <foaf:givenName>Manuel</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Traub</foaf:surname>
                        <foaf:givenName>Jonas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Breß</foaf:surname>
                        <foaf:givenName>Sebastian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rabl</foaf:surname>
                        <foaf:givenName>Tilmann</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_85"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3303753.3316441</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>516-530</bib:pages>
        <dc:date>2019-01-01</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:56</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Modern Stream Processing Engines (SPEs) process large data volumes under tight latency constraints. Many SPEs execute processing pipelines using message passing on sharednothing architectures and apply a partition-based scale-out strategy to handle high-velocity input streams. Furthermore, many state-of-the-art SPEs rely on a Java Virtual Machine to achieve platform independence and speed up system development by abstracting from the underlying hardware. In this paper, we show that taking the underlying hardware into account is essential to exploit modern hardware eﬃciently. To this end, we conduct an extensive experimental analysis of current SPEs and SPE design alternatives optimized for modern hardware. Our analysis highlights potential bottlenecks and reveals that state-of-the-art SPEs are not capable of fully exploiting current and emerging hardware trends, such as multi-core processors and high-speed networks. Based on our analysis, we describe a set of design changes to the common architecture of SPEs to scale-up on modern hardware. We show that the single-node throughput can be increased by up to two orders of magnitude compared to state-of-the-art SPEs by applying specialized code generation, fusing operators, batch-style parallelization strategies, and optimized windowing. This speedup allows for deploying typical streaming applications on a single or a few nodes instead of large clusters.</dcterms:abstract>
        <dc:title>Analyzing efficient stream processing on modern hardware</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_85">
        <z:itemType>attachment</z:itemType>
        <dc:title>Zeuch 等。 - 2019 - Analyzing efficient stream processing on modern ha.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://link.springer.com/10.1007/s00778-018-0514-9">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf rdf:resource="urn:issn:1066-8888,%200949-877X"/>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>To</foaf:surname>
                        <foaf:givenName>Quoc-Cuong</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Soto</foaf:surname>
                        <foaf:givenName>Juan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_86"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://link.springer.com/10.1007/s00778-018-0514-9</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>847-872</bib:pages>
        <dc:date>12/2018</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:53</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>The concept of state and its applications vary widely across big data processing systems. This is evident in both the research literature and existing systems, such as Apache Flink, Apache Heron, Apache Samza, Apache Spark, and Apache Storm. Given the pivotal role that state management plays, particularly, for iterative batch and stream processing, in this survey, we present examples of state as an enabler, discuss the alternative approaches used to handle and implement state, capture the many facets of state management, and highlight new research directions. Our aim is to provide insight into disparate state management techniques, motivate others to pursue research in this area, and draw attention to open problems.</dcterms:abstract>
        <dc:title>A survey of state management in big data processing systems</dc:title>
    </bib:Article>
    <bib:Journal rdf:about="urn:issn:1066-8888,%200949-877X">
        <prism:volume>27</prism:volume>
        <prism:number>6</prism:number>
        <dc:title>The VLDB Journal</dc:title>
        <dc:identifier>ISSN 1066-8888, 0949-877X</dc:identifier>
        <dcterms:alternative>The VLDB Journal</dcterms:alternative>
        <dc:identifier>DOI 10.1007/s00778-018-0514-9</dc:identifier>
    </bib:Journal>
    <z:Attachment rdf:about="#item_86">
        <z:itemType>attachment</z:itemType>
        <dc:title>To 等。 - 2018 - A survey of state management in big data processin.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-2737-4">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-2737-4</dc:identifier>
                <dc:identifier>DOI 10.1145/2611286.2611309</dc:identifier>
                <dc:title>Proceedings of the 8th ACM International Conference on Distributed Event-Based Systems - DEBS '14</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Mumbai, India</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Heinze</foaf:surname>
                        <foaf:givenName>Thomas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Aniello</foaf:surname>
                        <foaf:givenName>Leonardo</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Querzoni</foaf:surname>
                        <foaf:givenName>Leonardo</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jerzak</foaf:surname>
                        <foaf:givenName>Zbigniew</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_87"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2611286.2611309</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>238-245</bib:pages>
        <dc:date>2014</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:49</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 8th ACM International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>In this tutorial we present the results of recent research about the cloud enablement of data streaming systems. We illustrate, based on both industrial as well as academic prototypes, new emerging uses cases and research trends. Speciﬁcally, we focus on novel approaches for (1) scalability and (2) fault tolerance in large scale distributed streaming systems. In general, new fault tolerance mechanisms strive to be more robust and at the same time introduce less overhead. Novel load balancing approaches focus on elastic scaling over hundreds of instances based on the data and query workload. Finally, we present open challenges for the next generation of cloud-based data stream processing engines.</dcterms:abstract>
        <dc:title>Cloud-based data stream processing</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_87">
        <z:itemType>attachment</z:itemType>
        <dc:title>Heinze 等。 - 2014 - Cloud-based data stream processing.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_62">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Carbone</foaf:surname>
                        <foaf:givenName>Paris</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Haridi</foaf:surname>
                        <foaf:givenName>Seif</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ewen</foaf:surname>
                        <foaf:givenName>Stephan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Richter</foaf:surname>
                        <foaf:givenName>Stefan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_88"/>
        <bib:pages>12</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Stream processors are emerging in industry as an apparatus that drives analytical but also mission critical services handling the core of persistent application logic. Thus, apart from scalability and low-latency, a rising system need is ﬁrst-class support for application state together with strong consistency guarantees, and adaptivity to cluster reconﬁgurations, software patches and partial failures. Although prior systems research has addressed some of these speciﬁc problems, the practical challenge lies on how such guarantees can be materialized in a transparent, non-intrusive manner that relieves the user from unnecessary constraints. Such needs served as the main design principles of state management in Apache Flink, an open source, scalable stream processor.</dcterms:abstract>
        <dc:title>State Management in Apache Flink R</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_88">
        <z:itemType>attachment</z:itemType>
        <dc:title>Carbone 等。 - State Management in Apache Flink R.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="http://dl.acm.org/citation.cfm?doid=2882903.2882906">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-3531-7</dc:identifier>
                <dc:identifier>DOI 10.1145/2882903.2882906</dc:identifier>
                <dc:title>Proceedings of the 2016 International Conference on Management of Data - SIGMOD '16</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                        <vcard:locality>San Francisco, California, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Koliousis</foaf:surname>
                        <foaf:givenName>Alexandros</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Weidlich</foaf:surname>
                        <foaf:givenName>Matthias</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Castro Fernandez</foaf:surname>
                        <foaf:givenName>Raul</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wolf</foaf:surname>
                        <foaf:givenName>Alexander L.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Costa</foaf:surname>
                        <foaf:givenName>Paolo</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Pietzuch</foaf:surname>
                        <foaf:givenName>Peter</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_89"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2882903.2882906</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>555-569</bib:pages>
        <dc:date>2016</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:44</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2016 International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Modern servers have become heterogeneous, often combining multicore CPUs with many-core GPGPUs. Such heterogeneous architectures have the potential to improve the performance of data-intensive stream processing applications, but they are not supported by current relational stream processing engines. For an engine to exploit a heterogeneous architecture, it must execute streaming SQL queries with sufﬁcient data-parallelism to fully utilise all available heterogeneous processors, and decide how to use each in the most effective way. It must do this while respecting the semantics of streaming SQL queries, in particular with regard to window handling.</dcterms:abstract>
        <dc:title>SABER: Window-Based Hybrid Stream Processing for Heterogeneous Architectures</dc:title>
        <z:shortTitle>SABER</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_89">
        <z:itemType>attachment</z:itemType>
        <dc:title>Koliousis 等。 - 2016 - SABER Window-Based Hybrid Stream Processing for H.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_64">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jonathan</foaf:surname>
                        <foaf:givenName>Albert</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Chandra</foaf:surname>
                        <foaf:givenName>Abhishek</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Weissman</foaf:surname>
                        <foaf:givenName>Jon</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_90"/>
        <bib:pages>7</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Adaptability is an important property of stream processing systems since the systems need to maintain low latency and high throughput execution of long-running queries. In a wide-area environment, dynamics are common not only because of the workload variability but also the nature of wide-area network (WAN) bandwidth that frequently changes. In this work, we study the adaptability property of stream processing systems designed for a wide-area environment. Speciﬁcally, we (1) discuss the challenges of reconﬁguring query executions in a widearea environment, (2) propose ideas how to adapt existing reconﬁguration techniques used in centralized Cloud to a wide-area environment, and (3) discuss the tradeoffs between them. A key ﬁnding is that the best adaptation technique to use depends on the network conditions, types of query, and optimization metrics.</dcterms:abstract>
        <dc:title>Rethinking Adaptability in Wide-Area Stream Processing Systems</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_90">
        <z:itemType>attachment</z:itemType>
        <dc:title>Jonathan 等。 - Rethinking Adaptability in Wide-Area Stream Proces.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_65">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>1</prism:volume>
                <prism:number>1</prism:number>
                <dc:title>ACM Computing Surveys</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liu</foaf:surname>
                        <foaf:givenName>Xunyun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Buyya</foaf:surname>
                        <foaf:givenName>Rajkumar</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_91"/>
        <bib:pages>40</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dc:title>Resource Management and Scheduling in Distributed Stream Processing Systems: A Taxonomy, Review and Future Directions</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_91">
        <z:itemType>attachment</z:itemType>
        <dc:title>Liu 和 Buyya - Resource Management and Scheduling in Distributed .pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://link.springer.com/10.1007/s00287-019-01206-w">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf rdf:resource="urn:issn:0170-6012,%201432-122X"/>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Le Quoc</foaf:surname>
                        <foaf:givenName>Do</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Beck</foaf:surname>
                        <foaf:givenName>Martin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Bhatotia</foaf:surname>
                        <foaf:givenName>Pramod</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Chen</foaf:surname>
                        <foaf:givenName>Ruichuan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fetzer</foaf:surname>
                        <foaf:givenName>Christof</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Strufe</foaf:surname>
                        <foaf:givenName>Thorsten</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_92"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://link.springer.com/10.1007/s00287-019-01206-w</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dc:date>2019-9-3</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:37</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>How to preserve users’ privacy while supporting high-utility analytics for low-latency stream processing? To answer this question: we describe the design, implementation and evaluation of PRIVAPPROX, a data analytics system for privacy-preserving stream processing. PRIVAPPROX provides three important properties: (i) Privacy: zero-knowledge privacy guarantee for users, a privacy bound tighter than the state-of-the-art differential privacy; (ii) Utility: an interface for data analysts to systematically explore the trade-offs between the output accuracy (with error estimation) and the query execution budget; (iii) Latency: near real-time stream processing based on a scalable “synchronization-free” distributed architecture. The key idea behind our approach is to marry two techniques together, namely, sampling (used for approximate computation) and randomized response (used for privacypreserving analytics). The resulting marriage is complementary — it achieves stronger privacy guarantees, and also improves the performance for stream analytics.</dcterms:abstract>
        <dc:title>PrivApprox: Privacy-Preserving Stream Analytics: (Extended Abstract)</dc:title>
        <z:shortTitle>PrivApprox</z:shortTitle>
    </bib:Article>
    <bib:Journal rdf:about="urn:issn:0170-6012,%201432-122X">
        <dc:title>Informatik Spektrum</dc:title>
        <dc:identifier>ISSN 0170-6012, 1432-122X</dc:identifier>
        <dcterms:alternative>Informatik Spektrum</dcterms:alternative>
        <dc:identifier>DOI 10.1007/s00287-019-01206-w</dc:identifier>
    </bib:Journal>
    <z:Attachment rdf:about="#item_92">
        <z:itemType>attachment</z:itemType>
        <dc:title>Le Quoc 等。 - 2019 - PrivApprox Privacy-Preserving Stream Analytics (.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_67">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>27</prism:volume>
                <prism:number>6</prism:number>
                <dc:title>The VLDB Journal</dc:title>
                <dc:identifier>ISSN 1066-8888, 0949-877X</dc:identifier>
                <dcterms:alternative>The VLDB Journal</dcterms:alternative>
                <dc:identifier>DOI 10.1007/s00778-018-0514-9</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>To</foaf:surname>
                        <foaf:givenName>Quoc-Cuong</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Soto</foaf:surname>
                        <foaf:givenName>Juan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_93"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://link.springer.com/10.1007/s00778-018-0514-9</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>847-872</bib:pages>
        <dc:date>12/2018</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:19</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>The concept of state and its applications vary widely across big data processing systems. This is evident in both the research literature and existing systems, such as Apache Flink, Apache Heron, Apache Samza, Apache Spark, and Apache Storm. Given the pivotal role that state management plays, particularly, for iterative batch and stream processing, in this survey, we present examples of state as an enabler, discuss the alternative approaches used to handle and implement state, capture the many facets of state management, and highlight new research directions. Our aim is to provide insight into disparate state management techniques, motivate others to pursue research in this area, and draw attention to open problems.</dcterms:abstract>
        <dc:title>A survey of state management in big data processing systems</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_93">
        <z:itemType>attachment</z:itemType>
        <dc:title>To 等。 - 2018 - A survey of state management in big data processin.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="http://dl.acm.org/citation.cfm?doid=3132747.3132750">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-5085-3</dc:identifier>
                <dc:identifier>DOI 10.1145/3132747.3132750</dc:identifier>
                <dc:title>Proceedings of the 26th Symposium on Operating Systems Principles  - SOSP '17</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Shanghai, China</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Venkataraman</foaf:surname>
                        <foaf:givenName>Shivaram</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Panda</foaf:surname>
                        <foaf:givenName>Aurojit</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ousterhout</foaf:surname>
                        <foaf:givenName>Kay</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Armbrust</foaf:surname>
                        <foaf:givenName>Michael</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ghodsi</foaf:surname>
                        <foaf:givenName>Ali</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Franklin</foaf:surname>
                        <foaf:givenName>Michael J.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Recht</foaf:surname>
                        <foaf:givenName>Benjamin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Stoica</foaf:surname>
                        <foaf:givenName>Ion</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_94"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3132747.3132750</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>374-389</bib:pages>
        <dc:date>2017</dc:date>
        <dcterms:dateSubmitted>2019-09-16 02:50:14</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 26th Symposium</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Large scale streaming systems aim to provide high throughput and low latency. They are often used to run mission-critical applications, and must be available 24x7. Thus such systems need to adapt to failures and inherent changes in workloads, with minimal impact on latency and throughput. Unfortunately, existing solutions require operators to choose between achieving low latency during normal operation and incurring minimal impact during adaptation. Continuous operator streaming systems, such as Naiad and Flink, provide low latency during normal execution but incur high overheads during adaptation (e.g., recovery), while micro-batch systems, such as Spark Streaming and FlumeJava, adapt rapidly at the cost of high latency during normal operations. Our key observation is that while streaming workloads require millisecond-level processing, workload and cluster properties change less frequently. Based on this, we develop Drizzle, a system that decouples the processing interval from the coordination interval used for fault tolerance and adaptability. Our experiments on a 128 node EC2 cluster show that on the Yahoo Streaming Benchmark, Drizzle can achieve endto-end record processing latencies of less than 100ms and can get 2–3x lower latency than Spark. Drizzle also exhibits better adaptability, and can recover from failures 4x faster than Flink while having up to 13x lower latency during recovery.</dcterms:abstract>
        <dc:title>Drizzle: Fast and Adaptable Stream Processing at Scale</dc:title>
        <z:shortTitle>Drizzle</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_94">
        <z:itemType>attachment</z:itemType>
        <dc:title>Venkataraman 等。 - 2017 - Drizzle Fast and Adaptable Stream Processing at S.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_73">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Carbone</foaf:surname>
                        <foaf:givenName>Paris</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Haridi</foaf:surname>
                        <foaf:givenName>Seif</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ewen</foaf:surname>
                        <foaf:givenName>Stephan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Richter</foaf:surname>
                        <foaf:givenName>Stefan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_99"/>
        <bib:pages>12</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Stream processors are emerging in industry as an apparatus that drives analytical but also mission critical services handling the core of persistent application logic. Thus, apart from scalability and low-latency, a rising system need is ﬁrst-class support for application state together with strong consistency guarantees, and adaptivity to cluster reconﬁgurations, software patches and partial failures. Although prior systems research has addressed some of these speciﬁc problems, the practical challenge lies on how such guarantees can be materialized in a transparent, non-intrusive manner that relieves the user from unnecessary constraints. Such needs served as the main design principles of state management in Apache Flink, an open source, scalable stream processor.</dcterms:abstract>
        <dc:title>State Management in Apache Flink R</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_99">
        <z:itemType>attachment</z:itemType>
        <dc:title>Carbone 等。 - State Management in Apache Flink R.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_74">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Moritz</foaf:surname>
                        <foaf:givenName>Philipp</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Nishihara</foaf:surname>
                        <foaf:givenName>Robert</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Stephanie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Tumanov</foaf:surname>
                        <foaf:givenName>Alexey</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liaw</foaf:surname>
                        <foaf:givenName>Richard</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liang</foaf:surname>
                        <foaf:givenName>Eric</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Elibol</foaf:surname>
                        <foaf:givenName>Melih</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yang</foaf:surname>
                        <foaf:givenName>Zongheng</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Paul</foaf:surname>
                        <foaf:givenName>William</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jordan</foaf:surname>
                        <foaf:givenName>Michael I</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Stoica</foaf:surname>
                        <foaf:givenName>Ion</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_100"/>
        <bib:pages>19</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>The next generation of AI applications will continuously interact with the environment and learn from these interactions. These applications impose new and demanding systems requirements, both in terms of performance and ﬂexibility. In this paper, we consider these requirements and present Ray—a distributed system to address them. Ray implements a uniﬁed interface that can express both task-parallel and actor-based computations, supported by a single dynamic execution engine. To meet the performance requirements, Ray employs a distributed scheduler and a distributed and fault-tolerant store to manage the system’s control state. In our experiments, we demonstrate scaling beyond 1.8 million tasks per second and better performance than existing specialized systems for several challenging reinforcement learning applications.</dcterms:abstract>
        <dc:title>Ray: A Distributed Framework for Emerging AI Applications</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_100">
        <z:itemType>attachment</z:itemType>
        <dc:title>Moritz 等。 - Ray A Distributed Framework for Emerging AI Appli.pdf</dc:title>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_108">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Stephanie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Liagouris</foaf:surname>
                        <foaf:givenName>John</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Nishihara</foaf:surname>
                        <foaf:givenName>Robert</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Moritz</foaf:surname>
                        <foaf:givenName>Philipp</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Misra</foaf:surname>
                        <foaf:givenName>Ujval</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Tumanov</foaf:surname>
                        <foaf:givenName>Alexey</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Stoica</foaf:surname>
                        <foaf:givenName>Ion</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_120"/>
        <bib:pages>15</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>As cluster computing frameworks such as Spark, Dryad, Flink, and Ray are being deployed in mission critical applications and on larger and larger clusters, their ability to tolerate failures is growing in importance. These frameworks employ two broad approaches for fault tolerance: checkpointing and lineage. Checkpointing exhibits low overhead during normal operation but high overhead during recovery, while lineage-based solutions make the opposite tradeoff.</dcterms:abstract>
        <dc:title>Lineage Stash: Fault Tolerance Off the Critical Path</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_120">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://people.inf.ethz.ch/ioannisl/sosp19.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-10-16 02:36:01</dcterms:dateSubmitted>
        <dc:title>Wang 等。 - Lineage Stash Fault Tolerance Off the Critical Pa.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-2037-5">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-2037-5</dc:identifier>
                <dc:identifier>DOI 10.1145/2463676.2465282</dc:identifier>
                <dc:title>Proceedings of the 2013 international conference on Management of data - SIGMOD '13</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>New York, New York, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Castro Fernandez</foaf:surname>
                        <foaf:givenName>Raul</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Migliavacca</foaf:surname>
                        <foaf:givenName>Matteo</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kalyvianaki</foaf:surname>
                        <foaf:givenName>Evangelia</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Pietzuch</foaf:surname>
                        <foaf:givenName>Peter</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_121"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2463676.2465282</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>725</bib:pages>
        <dc:date>2013</dc:date>
        <dcterms:dateSubmitted>2019-10-02 02:03:22</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2013 international conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>As users of “big data” applications expect fresh results, we witness a new breed of stream processing systems (SPS) that are designed to scale to large numbers of cloud-hosted machines. Such systems face new challenges: (i) to beneﬁt from the “pay-as-you-go” model of cloud computing, they must scale out on demand, acquiring additional virtual machines (VMs) and parallelising operators when the workload increases; (ii) failures are common with deployments on hundreds of VMs—systems must be fault-tolerant with fast recovery times, yet low per-machine overheads. An open question is how to achieve these two goals when stream queries include stateful operators, which must be scaled out and recovered without aﬀecting query results.</dcterms:abstract>
        <dc:title>Integrating scale out and fault tolerance in stream processing using operator state management</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_121">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://raulcastrofernandez.com/papers/sigmod13-seep.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-10-02 02:03:11</dcterms:dateSubmitted>
        <dc:title>Castro Fernandez 等。 - 2013 - Integrating scale out and fault tolerance in strea.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Document rdf:about="https://www.infoworld.com/article/3293426/how-to-build-stateful-streaming-applications-with-apache-flink.html">
        <z:itemType>webpage</z:itemType>
        <dcterms:isPartOf>
           <z:Website></z:Website>
        </dcterms:isPartOf>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://www.infoworld.com/article/3293426/how-to-build-stateful-streaming-applications-with-apache-flink.html</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-09-30 02:28:09</dcterms:dateSubmitted>
        <dc:title>How to build stateful streaming applications with Apache Flink | InfoWorld</dc:title>
    </bib:Document>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-4404-3">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-4404-3</dc:identifier>
                <dc:identifier>DOI 10.1145/3030207.3030227</dc:identifier>
                <dc:title>Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering - ICPE '17</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>L'Aquila, Italy</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ravindra</foaf:surname>
                        <foaf:givenName>Sajith</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Dayarathna</foaf:surname>
                        <foaf:givenName>Miyuru</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jayasena</foaf:surname>
                        <foaf:givenName>Sanath</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_131"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3030207.3030227</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>91-102</bib:pages>
        <dc:date>2017</dc:date>
        <dcterms:dateSubmitted>2019-11-14 04:20:21</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
           <bib:Conference><dc:title>the 8th ACM/SPEC</dc:title></bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Elastic scaling of event stream processing systems has gained signiﬁcant attention recently due to the prevalence of cloud computing technologies. We investigate on the complexities associated with elastic scaling of an event processing system in a private/public cloud scenario. We develop an Elastic Switching Mechanism (ESM) which reduces the overall average latency of event processing jobs by signiﬁcant amount considering the cost of operating the system. ESM is augmented with adaptive compressing of upstream data. The ESM conducts one of the two types of switching where either part of the data is sent to the public cloud (data switching) or a selected query is sent to the public cloud (query switching) based on the characteristics of the query. We model the operation of the ESM as the function of two binary switching functions. We show that our elastic switching mechanism with compression is capable of handling out-of-order events more efﬁciently compared to techniques which does not involve compression. We used two application benchmarks called EmailProcessor and a Social Networking Benchmark (SNB2016) to conduct multiple experiments to evaluate the effectiveness of our approach. In a single query deployment with EmailProcessor benchmark we observed that our elastic switching mechanism provides 1.24 seconds average latency improvement per processed event which is 16.70% improvement compared to private cloud only deployment. When presented the option of scaling EmailProcessor with four public cloud VMs ESM further reduced the average latency by 37.55% compared to the single public cloud VM. In a multi-query deployment with both EmailProcessor and SNB2016 we obtained a reduction of average latency of both the queries by 39.61 seconds which is a decrease of 7% of overall latency. These performance ﬁgures indicate that our elastic switching mechanism with compressed data streams can effectively reduce the average elapsed time of stream processing happening in private/public clouds.</dcterms:abstract>
        <dc:title>Latency Aware Elastic Switching-based Stream Processing Over Compressed Data Streams</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_131">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://research.spec.org/icpe_proceedings/2017/proceedings/p91.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-14 04:20:16</dcterms:dateSubmitted>
        <dc:title>Ravindra 等。 - 2017 - Latency Aware Elastic Switching-based Stream Proce.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="#item_133">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>DOI 10.1109/ICDCS.2015.48</dc:identifier>
                <dc:title>2015 IEEE 35th International Conference on Distributed Computing Systems</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lohrmann</foaf:surname>
                        <foaf:givenName>Björn</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Janacik</foaf:surname>
                        <foaf:givenName>Peter</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kao</foaf:surname>
                        <foaf:givenName>Odej</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_135"/>
        <link:link rdf:resource="#item_134"/>
        <dc:subject>
            <z:AutomaticTag>
                <rdf:value>application performing real-time sentiment analysis</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>appropriate scaling action</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Autoscaling</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Big Data</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Big Data application</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>cloud technology</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>cluster resource management system</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>data flow analysis</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Elastic Scaling</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>elastic stream processing</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>elasticity inherent</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Engines</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Latency Constraint</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>latency guarantee</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Latency Guarantee</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Nephele SPE</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>parallel processing</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Parallel processing</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Quality of service</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Real-time systems</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>resource allocation</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Runtime</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>scalable SPE</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>scalable stream processing engine</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>social media data flow</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>social networking (online)</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Storms</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Stream Processing</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Stream Processing Engine</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Streaming</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>Throughput</rdf:value></z:AutomaticTag>
        </dc:subject>
        <bib:pages>399-410</bib:pages>
        <dc:date>June 2015</dc:date>
        <dc:description>ISSN: 1063-6927</dc:description>
        <z:libraryCatalog>IEEE Xplore</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>2015 IEEE 35th International Conference on Distributed Computing Systems</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <dcterms:abstract>Many Big Data applications in science and industry have arisen, that require large amounts of streamed or event data to be analyzed with low latency. This paper presents a reactive strategy to enforce latency guarantees in data flows running on scalable Stream Processing Engines (SPEs), while minimizing resource consumption. We introduce a model for estimating the latency of a data flow, when the degrees of parallelism of the tasks within are changed. We describe how to continuously measure the necessary performance metrics for the model, and how it can be used to enforce latency guarantees, by determining appropriate scaling actions at runtime. Therefore, it leverages the elasticity inherent to common cloud technology and cluster resource management systems. We have implemented our strategy as part of the Nephele SPE. To showcase the effectiveness of our approach, we provide an experimental evaluation on a large commodity cluster, using both a synthetic workload as well as an application performing real-time sentiment analysis on real-world social media data.</dcterms:abstract>
        <dc:title>Elastic Stream Processing with Latency Guarantees</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_135">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://ieeexplore.ieee.org/document/7164926/?arnumber=7164926</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-14 04:24:19</dcterms:dateSubmitted>
        <dc:title>IEEE Xplore Abstract Record</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <z:Attachment rdf:about="#item_134">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://ieeexplore.ieee.org/ielx7/7164874/7164877/07164926.pdf?tp=&amp;arnumber=7164926&amp;isnumber=7164877&amp;ref=aHR0cHM6Ly9pZWVleHBsb3JlLmllZWUub3JnL3N0YW1wL3N0YW1wLmpzcD90cD0mYXJudW1iZXI9NzE2NDkyNg==</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-14 04:24:01</dcterms:dateSubmitted>
        <dc:title>IEEE Xplore Full Text PDF</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=3329772.3342044">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>12</prism:volume>
                <prism:number>9</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3329772.3329777</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Hoffmann</foaf:surname>
                        <foaf:givenName>Moritz</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lattuada</foaf:surname>
                        <foaf:givenName>Andrea</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>McSherry</foaf:surname>
                        <foaf:givenName>Frank</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_150"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3329772.3342044</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1002-1015</bib:pages>
        <dc:date>2019-05-01</dc:date>
        <dcterms:dateSubmitted>2019-11-18 01:29:06</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>We design and implement Megaphone, a data migration mechanism for stateful distributed dataﬂow engines with latency objectives. When compared to existing migration mechanisms, Megaphone has the following diﬀerentiating characteristics: (i) migrations can be subdivided to a conﬁgurable granularity to avoid latency spikes, and (ii) migrations can be prepared ahead of time to avoid runtime coordination. Megaphone is implemented as a library on an unmodiﬁed timely dataﬂow implementation, and provides an operator interface compatible with its existing APIs. We evaluate Megaphone on established benchmarks with varying amounts of state and observe that compared to naïve approaches Megaphone reduces service latencies during reconﬁguration by orders of magnitude without signiﬁcantly increasing steady-state overhead.</dcterms:abstract>
        <dc:title>Megaphone: latency-conscious state migration for distributed streaming dataflows</dc:title>
        <z:shortTitle>Megaphone</z:shortTitle>
    </bib:Article>
    <z:Attachment rdf:about="#item_150">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://www.vldb.org/pvldb/vol12/p1002-hoffmann.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:29:01</dcterms:dateSubmitted>
        <dc:title>Hoffmann et al. - 2019 - Megaphone latency-conscious state migration for d.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_138">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Urhan</foaf:surname>
                        <foaf:givenName>Tolga</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Franklin</foaf:surname>
                        <foaf:givenName>Michael J</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_151"/>
        <bib:pages>7</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Wide-area distribution raises signiﬁcant performance problems for traditional query processing techniques as data access becomes less predictable due to link congestion, load imbalances, and temporary outages. Pipelined query execution is a promising approach to coping with unpredictability in such environments as it allows scheduling to adjust to the arrival properties of the data. We have developed a non-blocking join operator, called XJoin, which has a small memory footprint, allowing many such operators to be active in parallel. XJoin is optimized to produce initial results quickly and can hide intermittent delays in data arrival by reactively scheduling background processing. We show that XJoin is an effective solution for providing fast query responses to users even in the presence of slow and bursty remote sources.</dcterms:abstract>
        <dc:title>XJoin: A Reactively-Scheduled Pipelined Join Operator£</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_151">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://shuhaozhangtony.github.io/readings/progressive_algorithm/XJoin00.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:24:55</dcterms:dateSubmitted>
        <dc:title>Urhan and Franklin - XJoin A Reactively-Scheduled Pipelined Join Opera.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=2732939.2732944">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>7</prism:volume>
                <prism:number>9</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/2732939.2732944</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Roy</foaf:surname>
                        <foaf:givenName>Pratanu</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Teubner</foaf:surname>
                        <foaf:givenName>Jens</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Gemulla</foaf:surname>
                        <foaf:givenName>Rainer</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_152"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2732939.2732944</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>709-720</bib:pages>
        <dc:date>2014-05-01</dc:date>
        <dcterms:dateSubmitted>2019-11-18 01:10:49</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>This work revisits the processing of stream joins on modern hardware architectures. Our work is based on the recently proposed handshake join algorithm, which is a mechanism to parallelize the processing of stream joins in a NUMA-aware and hardware-friendly manner. Handshake join achieves high throughput and scalability, but it suﬀers from a high latency penalty and a non-deterministic ordering of the tuples in the physical result stream. In this paper, we ﬁrst characterize the latency behavior of the handshake join and then propose a new low-latency handshake join algorithm, which substantially reduces latency without sacriﬁcing throughput or scalability. We also present a technique to generate punctuated result streams with very little overhead; such punctuations allow the generation of correctly ordered physical output streams with negligible eﬀect on overall throughput and latency.</dcterms:abstract>
        <dc:title>Low-latency handshake join</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_152">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://www.vldb.org/pvldb/vol7/p709-roy.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:10:46</dcterms:dateSubmitted>
        <dc:title>Roy et al. - 2014 - Low-latency handshake join.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_140">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Najafi</foaf:surname>
                        <foaf:givenName>Mohammadreza</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Sadoghi</foaf:surname>
                        <foaf:givenName>Mohammad</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jacobsen</foaf:surname>
                        <foaf:givenName>Hans-Arno</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_153"/>
        <bib:pages>14</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>There is a rising interest in accelerating stream processing through modern parallel hardware, yet it remains a challenge as how to exploit the available resources to achieve higher throughput without sacrificing latency due to the increased length of processing pipeline and communication path and the need for central coordination. To achieve these objectives, we introduce a novel top-down data flow model for stream join processing (arguably, one of the most resource-intensive operators in stream processing), called SplitJoin, that operates by splitting the join operation into independent storing and processing steps that gracefully scale with respect to the number of cores. Furthermore, SplitJoin eliminates the need for global coordination while preserving the order of input streams by re-thinking how streams are channeled into distributed join computation cores and maintaining the order of output streams by proposing a novel distributed punctuation technique. Throughout our experimental analysis, SplitJoin offered up to 60% improvement in throughput while reducing latency by up to 3.3X compared to state-of-the-art solutions.</dcterms:abstract>
        <dc:title>SplitJoin: A Scalable, Low-latency Stream Join Architecture with Adjustable Ordering Precision</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_153">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://www.usenix.org/system/files/conference/atc16/atc16_paper-najafi.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:10:01</dcterms:dateSubmitted>
        <dc:title>Najafi et al. - SplitJoin A Scalable, Low-latency Stream Join Arc.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-0-7695-2065-0">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-0-7695-2065-0</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2004.1320002</dc:identifier>
                <dc:title>Proceedings. 20th International Conference on Data Engineering</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Boston, MA, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE Comput. Soc</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Mokbel</foaf:surname>
                        <foaf:givenName>M.F.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lu</foaf:surname>
                        <foaf:givenName>M.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Aref</foaf:surname>
                        <foaf:givenName>W.G.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_154"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/1320002/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>251-262</bib:pages>
        <dc:date>2004</dc:date>
        <dcterms:dateSubmitted>2019-11-18 01:09:30</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>Proceedings. 20th International Conference on Data Engineering</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>This paper introduces the hash-merge join algorithm (HMJ, for short); a new non-blocking join algorithm that deals with data items from remote sources via unpredictable, slow, or bursty network trafﬁc. The HMJ algorithm is designed with two goals in mind: (1) Minimize the time to produce the ﬁrst few results, and (2) Produce join results even if the two sources of the join operator occasionally get blocked. The HMJ algorithm has two phases: The hashing phase and the merging phase. The hashing phase employs an in-memory hash-based join algorithm that produces join results as quickly as data arrives. The merging phase is responsible for producing join results if the two sources are blocked. Both phases of the HMJ algorithm are connected via a ﬂushing policy that ﬂushes in-memory parts into disk storage once the memory is exhausted. Experimental results show that HMJ combines the advantages of two state-of-the-art non-blocking join algorithms (XJoin and Progressive Merge Join) while avoiding their shortcomings.</dcterms:abstract>
        <dc:title>Hash-merge join: a non-blocking join algorithm for producing fast and early join results</dc:title>
        <z:shortTitle>Hash-merge join</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_154">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://www-users.cs.umn.edu/~mokbel/papers/hashmj-icde04.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:09:27</dcterms:dateSubmitted>
        <dc:title>Mokbel et al. - 2004 - Hash-merge join a non-blocking join algorithm for.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="http://dl.acm.org/citation.cfm?doid=2723372.2746485">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-2758-9</dc:identifier>
                <dc:identifier>DOI 10.1145/2723372.2746485</dc:identifier>
                <dc:title>Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data - SIGMOD '15</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                        <vcard:locality>Melbourne, Victoria, Australia</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lin</foaf:surname>
                        <foaf:givenName>Qian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ooi</foaf:surname>
                        <foaf:givenName>Beng Chin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Zhengkui</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yu</foaf:surname>
                        <foaf:givenName>Cui</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_155"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2723372.2746485</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>811-825</bib:pages>
        <dc:date>2015</dc:date>
        <dcterms:dateSubmitted>2019-11-18 01:08:38</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2015 ACM SIGMOD International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Eﬃcient and scalable stream joins play an important role in performing real-time analytics for many cloud applications. However, like in conventional database processing, online theta-joins over data streams are computationally expensive and moreover, being memory-based processing, they impose high memory requirement on the system. In this paper, we propose a novel stream join model, called join-biclique, which organizes a large cluster as a complete bipartite graph. Join-biclique has several strengths over state-of-the-art techniques, including memory-eﬃciency, elasticity and scalability. These features are essential for building eﬃcient and scalable streaming systems. Based on join-biclique, we develop a scalable distributed stream join system, BiStream, over a large-scale commodity cluster. Speciﬁcally, BiStream is designed to support eﬃcient full-history joins, windowbased joins and online data aggregation. BiStream also supports adaptive resource management to dynamically scale out and down the system according to its application workloads. We provide both theoretical cost analysis and extensive experimental evaluations to evaluate the eﬃciency, elasticity and scalability of BiStream.</dcterms:abstract>
        <dc:title>Scalable Distributed Stream Join Processing</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_155">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://www.comp.nus.edu.sg/~ooibc/bistream_sigmod15.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:08:34</dcterms:dateSubmitted>
        <dc:title>Lin et al. - 2015 - Scalable Distributed Stream Join Processing.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="http://dl.acm.org/citation.cfm?doid=2882903.2915235">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-3531-7</dc:identifier>
                <dc:identifier>DOI 10.1145/2882903.2915235</dc:identifier>
                <dc:title>Proceedings of the 2016 International Conference on Management of Data - SIGMOD '16</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                        <vcard:locality>San Francisco, California, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Li</foaf:surname>
                        <foaf:givenName>Feifei</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wu</foaf:surname>
                        <foaf:givenName>Bin</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yi</foaf:surname>
                        <foaf:givenName>Ke</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhao</foaf:surname>
                        <foaf:givenName>Zhuoyue</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_156"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2882903.2915235</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>615-629</bib:pages>
        <dc:date>2016</dc:date>
        <dcterms:dateSubmitted>2019-11-18 01:08:04</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 2016 International Conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Joins are expensive, and online aggregation over joins was proposed to mitigate the cost, which oﬀers users a nice and ﬂexible tradeoﬀ between query eﬃciency and accuracy in a continuous, online fashion. However, the state-of-the-art approach, in both internal and external memory, is based on ripple join, which is still very expensive and even needs unrealistic assumptions (e.g., tuples in a table are stored in random order). This paper proposes a new approach, the wander join algorithm, to the online aggregation problem by performing random walks over the underlying join graph. We also design an optimizer that chooses the optimal plan for conducting the random walks without having to collect any statistics a priori. Compared with ripple join, wander join is particularly eﬃcient for equality joins involving multiple tables, but also supports θ-joins. Selection predicates and group-by clauses can be handled as well. Extensive experiments using the TPC-H benchmark have demonstrated the superior performance of wander join over ripple join. In particular, we have integrated and tested wander join in the latest version of PostgreSQL, demonstrating its practicality in a full-ﬂedged database system.</dcterms:abstract>
        <dc:title>Wander Join: Online Aggregation via Random Walks</dc:title>
        <z:shortTitle>Wander Join</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_156">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://www.cse.ust.hk/~yike/sigmod16.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:08:01</dcterms:dateSubmitted>
        <dc:title>Li et al. - 2016 - Wander Join Online Aggregation via Random Walks.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_144">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lawrence</foaf:surname>
                        <foaf:givenName>Ramon</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_157"/>
        <bib:pages>12</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Minimizing both the response time to produce the ﬁrst few thousand results and the overall execution time is important for interactive querying. Current join algorithms either minimize the execution time at the expense of response time or minimize response time by producing results early without optimizing the total time. We present a hashbased join algorithm, called early hash join, which can be dynamically conﬁgured at any point during join processing to tradeoff faster production of results for overall execution time. We demonstrate that varying how inputs are read has a major effect on these two factors and provide formulas that allow an optimizer to calculate the expected rate of join output and the number of I/O operations performed using different input reading strategies. Experimental results show that early hash join performs signiﬁcantly fewer I/O operations and executes faster than other early join algorithms, especially for one-to-many joins. Its overall execution time is comparable to standard hybrid hash join, but its response time is an order of magnitude faster. Thus, early hash join can replace hybrid hash join in any situation where a fast initial response time is beneﬁcial without the penalty in overall execution time exhibited by other early join algorithms.</dcterms:abstract>
        <dc:title>Early Hash Join: A Conﬁgurable Algorithm for the Efﬁcient and Early Production of Join Results</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_157">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://vldb.org/archives/website/2005/program/paper/thu/p841-lawrence.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-18 01:07:03</dcterms:dateSubmitted>
        <dc:title>Lawrence - Early Hash Join A Conﬁgurable Algorithm for the E.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-1758-0">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-1758-0</dc:identifier>
                <dc:identifier>DOI 10.1145/2488222.2488279</dc:identifier>
                <dc:title>Proceedings of the 7th ACM international conference on Distributed event-based systems - DEBS '13</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Arlington, Texas, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wu</foaf:surname>
                        <foaf:givenName>Yingjun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Maier</foaf:surname>
                        <foaf:givenName>David</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Tan</foaf:surname>
                        <foaf:givenName>Kian-Lee</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_158"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2488222.2488279</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>301</bib:pages>
        <dc:date>2013</dc:date>
        <dcterms:dateSubmitted>2019-11-17 07:47:02</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the 7th ACM international conference</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>A stream processing engine, named SPRINT, is designed and implemented to eﬃciently process queries over highspeed sensor data streams from soccer games. SPRINT adopts several novel strategies, including a lock-free ring buﬀer, frame-based sliding windows, and dynamic parallel computation, to pursue three objectives: high speed, high precision, and low space consumption. Experiments show that SPRINT can achieve these three goals simultaneously.</dcterms:abstract>
        <dc:title>Grand challenge: SPRINT stream processing engine as a solution</dc:title>
        <z:shortTitle>Grand challenge</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_158">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://yingjunwu.github.io/papers/debs2013.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-17 07:46:59</dcterms:dateSubmitted>
        <dc:title>Wu et al. - 2013 - Grand challenge SPRINT stream processing engine a.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="https://linkinghub.elsevier.com/retrieve/pii/S0164121214002556">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf rdf:resource="urn:issn:01641212"/>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yang</foaf:surname>
                        <foaf:givenName>Dingyu</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Cao</foaf:surname>
                        <foaf:givenName>Jian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wu</foaf:surname>
                        <foaf:givenName>Sai</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Jie</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_159"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://linkinghub.elsevier.com/retrieve/pii/S0164121214002556</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>146-157</bib:pages>
        <dc:date>04/2015</dc:date>
        <dcterms:dateSubmitted>2019-11-17 04:20:40</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Interactive query processing aims at generating approximate results with minimum response time. However, it is quite diﬃcult for a batch-oriented processing system to progressively provide cumulatively accurate results in the context of a distributed environment. MapReduce Online extends the MapReduce framework to support online aggregation, but it is hindered by its processing speed in keeping up with ongoing real-time data events. We deploy the online aggregation algorithm over S4, a scalable stream processing system that is inspired by the combined functionalities of MapReduce and Actor model. Our system applies an asynchronous message communication mechanism from actor model to support online aggregation. It can process large scale data stream with high concurrency in a short response time. In this system, we adopt a distributed weighted random sampling algorithm to solve biased distribution between different streams. Furthermore, a multi-level query processing topology is developed to reduce overlapped processing for multiple queries. Our system can provide continuous window aggregation with a conﬁdence interval and error bound. We have implemented our system and conducted plentiful experiments over the TPC-H benchmark. A large number of experiments are carried out to demonstrate that by using our system, high-quality query results can be generated within a short response time and that the approach outperforms MapReduce Online on data streams.</dcterms:abstract>
        <dc:title>Progressive online aggregation in a distributed stream system</dc:title>
    </bib:Article>
    <bib:Journal rdf:about="urn:issn:01641212">
        <prism:volume>102</prism:volume>
        <dc:title>Journal of Systems and Software</dc:title>
        <dc:identifier>ISSN 01641212</dc:identifier>
        <dcterms:alternative>Journal of Systems and Software</dcterms:alternative>
        <dc:identifier>DOI 10.1016/j.jss.2014.11.027</dc:identifier>
    </bib:Journal>
    <z:Attachment rdf:about="#item_159">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://pdf.sciencedirectassets.com/271629/1-s2.0-S0164121214X00154/1-s2.0-S0164121214002556/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEFsaCXVzLWVhc3QtMSJIMEYCIQCaYcNtH6iSV270XRbKffsJNrtLbhoKdVuvJr8PPS6IdQIhAKxqJdDQDV9FGRqe%2BgvfUL7o7B%2Ba65dROvmzKS9rlPIXKtgCCIT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDU5MDAzNTQ2ODY1Igy%2B5GXoK3NN9fPAmpUqrAJO%2BXAzmG50q6tIbh0IVuead87ZfY976AJs%2F2hCifS0GIPeCRqGoUnmk0i%2FNQ5sIckA0F6eIT7C2unHWoNGFovplM38s3SrHEpptNwEyzdYEwIBTwGvnDVfc7xJmM%2BSr6PQl2z2ZDwXjp4C%2FLdN5%2BdXg7NTxebKygswOqecXUNcJQHiNS9Zi6tGnG52yGhvTcsNJnGtjNTO0ohHXbgjT%2Fjhanuu4M6D8ld8M2I7tqSh7vlgr1J9Vyp6t2FhX0s8TQd2AIxdvlKVX8%2B0rq7a0NDv0OSKLOVePO4wUl3UH6LigctPflYbgDAx7id66GrYWbyi8CPw0mwXorWWCexgKhu2%2B1ZQDTnehroeuKaxdjuqO89dheOZjbRAAtkTp2sdTcNcN0YJtv01cCBY%2BvQwqOjC7gU6zwL6Y%2B69geFdFo6XVmXQOmBR%2BMCV2xK%2BJylUT9kMqWNhSlaY54b%2FSwdZ8OtAZaeV%2Fy4gBYloP1KCIZ%2FHf7x4CuGeWTMoFIynA%2By%2BjBdwKQ5BRJqHtErjITxocNmSYTqzCo0vAoozm8sGXCpqN3S5Sx3tPP495%2FU0kmCuyDWT8P7mg8B5ZQxXDnUeEDCUfMAnMARRI9Xoyzu73H56b%2FNsbdQIC4WEWONoTlJA7BmkKSlywsNmbTIAcRWLQhJXwEsqmMnjgl6bWXY7f6rnsSJNfHqOudZRrYTuJrswQZZS%2F7CWgwCfezgzjndYeay%2BZ0NLoFm%2Bela6Vh%2FR7SXopEGYHAtAiQR0CMF4xA2rU63utQ7i2bBsGLnESnMbvxbICPQDq33VOD5LR14EwYpWNZO002gkplXgzFF%2BdNLQtrFnIZWiQpCJVZXYyp2lHokZV%2BB7Fg%3D%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20191117T041935Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=300&amp;X-Amz-Credential=ASIAQ3PHCVTYRP4QISZB%2F20191117%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Signature=8ad10d13cd3051d6f54b59366f5bb32e25e66caf8dcb2288605446f32728cb5a&amp;hash=145f71690137b8aa11fe3996b4f25ac37173f870fbe7772d9ddcf2d76b503929&amp;host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&amp;pii=S0164121214002556&amp;tid=spdf-73bbd3f2-bf47-4f51-8a1f-0f4b98caa783&amp;sid=5db7eed6901fa9442f3a70a75eb6ee158389gxrqb&amp;type=client</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-17 04:20:33</dcterms:dateSubmitted>
        <dc:title>Yang et al. - 2015 - Progressive online aggregation in a distributed st.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://dl.acm.org/citation.cfm?doid=2735471.2735475">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>8</prism:volume>
                <prism:number>2</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/2735471.2735475</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Yang</foaf:surname>
                        <foaf:givenName>Dingyu</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Dongxiang</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Tan</foaf:surname>
                        <foaf:givenName>Kian-Lee</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Cao</foaf:surname>
                        <foaf:givenName>Jian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Le Mouël</foaf:surname>
                        <foaf:givenName>Frédéric</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_160"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2735471.2735475</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>137-148</bib:pages>
        <dc:date>2014-10-01</dc:date>
        <dcterms:dateSubmitted>2019-11-17 04:20:37</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Shortest path query over a dynamic road network is a prominent problem for the optimization of real-time trafﬁc systems. Existing solutions rely either on a centralized index system with tremendous pre-computation overhead, or on a distributed graph processing system such as Pregel that requires much synchronization effort. However, the performance of these systems degenerates with frequent route path updates caused by continuous trafﬁc condition change.</dcterms:abstract>
        <dc:title>CANDS: continuous optimal navigation via distributed stream processing</dc:title>
        <z:shortTitle>CANDS</z:shortTitle>
    </bib:Article>
    <z:Attachment rdf:about="#item_160">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://delivery.acm.org/10.1145/2740000/2735475/p137-yang.pdf?ip=137.132.83.27&amp;id=2735475&amp;acc=ACTIVE%20SERVICE&amp;key=BB5EB8D2067C1662%2EBB5EB8D2067C1662%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&amp;__acm__=1573964606_8709d493d955b403bdcabcf8cf9cf0ae</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-17 04:20:28</dcterms:dateSubmitted>
        <dc:title>Yang et al. - 2014 - CANDS continuous optimal navigation via distribut.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-2388-8">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-2388-8</dc:identifier>
                <dc:identifier>DOI 10.1145/2517349.2522738</dc:identifier>
                <dc:title>Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles - SOSP '13</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Farminton, Pennsylvania</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM Press</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Murray</foaf:surname>
                        <foaf:givenName>Derek G.</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>McSherry</foaf:surname>
                        <foaf:givenName>Frank</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Isaacs</foaf:surname>
                        <foaf:givenName>Rebecca</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Isard</foaf:surname>
                        <foaf:givenName>Michael</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Barham</foaf:surname>
                        <foaf:givenName>Paul</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Abadi</foaf:surname>
                        <foaf:givenName>Martín</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_161"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=2517349.2522738</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>439-455</bib:pages>
        <dc:date>2013</dc:date>
        <dcterms:dateSubmitted>2019-11-14 08:26:00</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
               <dc:title>the Twenty-Fourth ACM Symposium</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Naiad is a distributed system for executing data parallel, cyclic dataﬂow programs. It offers the high throughput of batch processors, the low latency of stream processors, and the ability to perform iterative and incremental computations. Although existing systems offer some of these features, applications that require all three have relied on multiple platforms, at the expense of efﬁciency, maintainability, and simplicity. Naiad resolves the complexities of combining these features in one framework. A new computational model, timely dataﬂow, underlies Naiad and captures opportunities for parallelism across a wide class of algorithms. This model enriches dataﬂow computation with timestamps that represent logical points in the computation and provide the basis for an efﬁcient, lightweight coordination mechanism.</dcterms:abstract>
        <dc:title>Naiad: a timely dataflow system</dc:title>
        <z:shortTitle>Naiad</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_161">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://sigops.org/s/conferences/sosp/2013/papers/p439-murray.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-14 08:25:44</dcterms:dateSubmitted>
        <dc:title>Murray et al. - 2013 - Naiad a timely dataflow system.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_164">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>12</prism:volume>
                <prism:number>5</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3303753.3303758</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zeuch</foaf:surname>
                        <foaf:givenName>Steffen</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Monte</foaf:surname>
                        <foaf:givenName>Bonaventura Del</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Karimov</foaf:surname>
                        <foaf:givenName>Jeyhun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lutz</foaf:surname>
                        <foaf:givenName>Clemens</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Renz</foaf:surname>
                        <foaf:givenName>Manuel</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Traub</foaf:surname>
                        <foaf:givenName>Jonas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Breß</foaf:surname>
                        <foaf:givenName>Sebastian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rabl</foaf:surname>
                        <foaf:givenName>Tilmann</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_163"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3303753.3316441</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>516-530</bib:pages>
        <dc:date>2019-01-01</dc:date>
        <dcterms:dateSubmitted>2019-11-22 02:54:08</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Modern Stream Processing Engines (SPEs) process large data volumes under tight latency constraints. Many SPEs execute processing pipelines using message passing on sharednothing architectures and apply a partition-based scale-out strategy to handle high-velocity input streams. Furthermore, many state-of-the-art SPEs rely on a Java Virtual Machine to achieve platform independence and speed up system development by abstracting from the underlying hardware. In this paper, we show that taking the underlying hardware into account is essential to exploit modern hardware eﬃciently. To this end, we conduct an extensive experimental analysis of current SPEs and SPE design alternatives optimized for modern hardware. Our analysis highlights potential bottlenecks and reveals that state-of-the-art SPEs are not capable of fully exploiting current and emerging hardware trends, such as multi-core processors and high-speed networks. Based on our analysis, we describe a set of design changes to the common architecture of SPEs to scale-up on modern hardware. We show that the single-node throughput can be increased by up to two orders of magnitude compared to state-of-the-art SPEs by applying specialized code generation, fusing operators, batch-style parallelization strategies, and optimized windowing. This speedup allows for deploying typical streaming applications on a single or a few nodes instead of large clusters.</dcterms:abstract>
        <dc:title>Analyzing efficient stream processing on modern hardware</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_163">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://delivery.acm.org/10.1145/3320000/3316441/p516-zeuch.pdf?ip=137.132.215.134&amp;id=3316441&amp;acc=ACTIVE%20SERVICE&amp;key=BB5EB8D2067C1662%2EBB5EB8D2067C1662%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&amp;__acm__=1574391487_dd5645185002d612c8e69441da7a5f28</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-11-22 02:54:04</dcterms:dateSubmitted>
        <dc:title>Zeuch 等。 - 2019 - Analyzing efficient stream processing on modern ha.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://arxiv.org/abs/1907.11229">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:title>Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining  - KDD '19</dc:title>
                <dc:identifier>DOI 10.1145/3292500.3330689</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fedoryszak</foaf:surname>
                        <foaf:givenName>Mateusz</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Frederick</foaf:surname>
                        <foaf:givenName>Brent</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rajaram</foaf:surname>
                        <foaf:givenName>Vijay</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhong</foaf:surname>
                        <foaf:givenName>Changtao</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <dcterms:isReferencedBy rdf:resource="#item_175"/>
        <link:link rdf:resource="#item_174"/>
        <link:link rdf:resource="#item_173"/>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Computer Science - Machine Learning</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
                <rdf:value>Computer Science - Social and Information Networks</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://arxiv.org/abs/1907.11229</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>2774-2782</bib:pages>
        <dc:date>2019</dc:date>
        <dc:description>arXiv: 1907.11229</dc:description>
        <dcterms:dateSubmitted>2020-03-05 16:35:23</dcterms:dateSubmitted>
        <z:libraryCatalog>arXiv.org</z:libraryCatalog>
        <dcterms:abstract>Social networks are quickly becoming the primary medium for discussing what is happening around real-world events. The information that is generated on social platforms like Twitter can produce rich data streams for immediate insights into ongoing matters and the conversations around them. To tackle the problem of event detection, we model events as a list of clusters of trending entities over time. We describe a real-time system for discovering events that is modular in design and novel in scale and speed: it applies clustering on a large stream with millions of entities per minute and produces a dynamically updated set of events. In order to assess clustering methodologies, we build an evaluation dataset derived from a snapshot of the full Twitter Firehose and propose novel metrics for measuring clustering quality. Through experiments and system profiling, we highlight key results from the offline and online pipelines. Finally, we visualize a high profile event on Twitter to show the importance of modeling the evolution of events, especially those detected from social data streams.</dcterms:abstract>
        <dc:title>Real-time Event Detection on Social Data Streams</dc:title>
    </bib:Article>
    <bib:Memo rdf:about="#item_175">
        <rdf:value>Comment: Accepted as a full paper at KDD 2019 on April 29, 2019</rdf:value>
    </bib:Memo>
    <z:Attachment rdf:about="#item_174">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/pdf/1907.11229.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-03-05 16:35:31</dcterms:dateSubmitted>
        <dc:title>arXiv Fulltext PDF</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <z:Attachment rdf:about="#item_173">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/abs/1907.11229</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-03-05 16:35:35</dcterms:dateSubmitted>
        <dc:title>arXiv.org Snapshot</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_167">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Alonso</foaf:surname>
                        <foaf:givenName>Gustavo</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Roscoe</foaf:surname>
                        <foaf:givenName>Timothy</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Cock</foaf:surname>
                        <foaf:givenName>David</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Ewaida</foaf:surname>
                        <foaf:givenName>Mohsen</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kara</foaf:surname>
                        <foaf:givenName>Kaan</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Korolija</foaf:surname>
                        <foaf:givenName>Dario</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Sidler</foaf:surname>
                        <foaf:givenName>David</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wang</foaf:surname>
                        <foaf:givenName>Zeke</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_176"/>
        <bib:pages>6</bib:pages>
        <z:libraryCatalog>Zotero</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Hardware is evolving at a very fast pace due to diverse trends in the IT industry. In the area of data processing, it is fair to say that software often just reacts to these changes, trying to accommodate developments that are not always an immediate step forward in terms of either performance or functionality. In this paper we report on two ongoing, longterm projects: Enzian, an experimental hardware platform to explore the design of software systems on future hardware, and doppioDB, a research database engine built to explore how to to co-design hardware and software from a data procesisng perspective. The paper focuses on the possibilities oﬀered by the combination of Enzian+doppioDB in terms of enabling novel data processing systems.</dcterms:abstract>
        <dc:title>Tackling Hardware/Software co-design from a database perspective</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_176">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://cidrdb.org/cidr2020/papers/p30-alonso-cidr20.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-01-22 07:11:45</dcterms:dateSubmitted>
        <dc:title>Alonso et al. - Tackling HardwareSoftware co-design from a databa.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://arxiv.org/abs/1802.08496">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:title>2018 IEEE 34th International Conference on Data Engineering (ICDE)</dc:title>
                <dc:identifier>DOI 10.1109/ICDE.2018.00169</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Karimov</foaf:surname>
                        <foaf:givenName>Jeyhun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rabl</foaf:surname>
                        <foaf:givenName>Tilmann</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Katsifodimos</foaf:surname>
                        <foaf:givenName>Asterios</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Samarev</foaf:surname>
                        <foaf:givenName>Roman</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Heiskanen</foaf:surname>
                        <foaf:givenName>Henri</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <dcterms:isReferencedBy rdf:resource="#item_183"/>
        <link:link rdf:resource="#item_182"/>
        <link:link rdf:resource="#item_181"/>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Computer Science - Databases</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
           <z:AutomaticTag><rdf:value>ieee.org</rdf:value></z:AutomaticTag>
        </dc:subject>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://arxiv.org/abs/1802.08496</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1507-1518</bib:pages>
        <dc:date>4/2018</dc:date>
        <dc:description>arXiv: 1802.08496</dc:description>
        <dcterms:dateSubmitted>2019-12-21 14:25:30</dcterms:dateSubmitted>
        <z:libraryCatalog>arXiv.org</z:libraryCatalog>
        <dcterms:abstract>The need for scalable and efficient stream analysis has led to the development of many open-source streaming data processing systems (SDPSs) with highly diverging capabilities and performance characteristics. While first initiatives try to compare the systems for simple workloads, there is a clear gap of detailed analyses of the systems' performance characteristics. In this paper, we propose a framework for benchmarking distributed stream processing engines. We use our suite to evaluate the performance of three widely used SDPSs in detail, namely Apache Storm, Apache Spark, and Apache Flink. Our evaluation focuses in particular on measuring the throughput and latency of windowed operations, which are the basic type of operations in stream analytics. For this benchmark, we design workloads based on real-life, industrial use-cases inspired by the online gaming industry. The contribution of our work is threefold. First, we give a definition of latency and throughput for stateful operators. Second, we carefully separate the system under test and driver, in order to correctly represent the open world model of typical stream processing deployments and can, therefore, measure system performance under realistic conditions. Third, we build the first benchmarking framework to define and test the sustainable performance of streaming systems. Our detailed evaluation highlights the individual characteristics and use-cases of each system.</dcterms:abstract>
        <dc:title>Benchmarking Distributed Stream Data Processing Systems</dc:title>
    </bib:Article>
    <bib:Memo rdf:about="#item_183">
       <rdf:value>Comment: Published at ICDE 2018</rdf:value>
    </bib:Memo>
    <z:Attachment rdf:about="#item_182">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/pdf/1802.08496.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-12-21 14:25:40</dcterms:dateSubmitted>
        <dc:title>arXiv Fulltext PDF</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <z:Attachment rdf:about="#item_181">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/abs/1802.08496</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2019-12-21 14:25:42</dcterms:dateSubmitted>
        <dc:title>arXiv.org Snapshot</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-4503-6735-6">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-6735-6</dc:identifier>
                <dc:identifier>DOI 10.1145/3318464.3383131</dc:identifier>
                <dc:title>Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Portland OR USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Carbone</foaf:surname>
                        <foaf:givenName>Paris</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fragkoulis</foaf:surname>
                        <foaf:givenName>Marios</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kalavri</foaf:surname>
                        <foaf:givenName>Vasiliki</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Katsifodimos</foaf:surname>
                        <foaf:givenName>Asterios</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_165"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://dl.acm.org/doi/10.1145/3318464.3383131</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>2651-2658</bib:pages>
        <dc:date>2020-06-11</dc:date>
        <dcterms:dateSubmitted>2020-06-23 04:59:56</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>SIGMOD/PODS '20: International Conference on Management of Data</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Stream processing has been an active research field for more than 20 years, but it is now witnessing its prime time due to recent successful efforts by the research community and numerous worldwide open-source communities. The goal of this tutorial is threefold. First, we aim to review and highlight noteworthy past research findings, which were largely ignored until very recently. Second, we intend to underline the differences between early (’00-’10) and modern (’11-’18) streaming systems, and how those systems have evolved through the years. Most importantly, we wish to turn the attention of the database community to recent trends: streaming systems are no longer used only for classic stream processing workloads, namely window aggregates and joins. Instead, modern streaming systems are being increasingly used to deploy general event-driven applications in a scalable fashion, challenging the design decisions, architecture and intended use of existing stream processing systems.</dcterms:abstract>
        <dc:title>Beyond Analytics: The Evolution of Stream Processing Systems</dc:title>
        <z:shortTitle>Beyond Analytics</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_165">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://dl.acm.org/doi/pdf/10.1145/3318464.3383131</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-06-23 04:59:43</dcterms:dateSubmitted>
        <dc:title>Carbone 等。 - 2020 - Beyond Analytics The Evolution of Stream Processi.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-5090-6543-1">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-5090-6543-1</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE.2017.119</dc:identifier>
                <dc:title>2017 IEEE 33rd International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>San Diego, CA, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Shuhao</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>He</foaf:surname>
                        <foaf:givenName>Bingsheng</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Dahlmeier</foaf:surname>
                        <foaf:givenName>Daniel</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhou</foaf:surname>
                        <foaf:givenName>Amelie Chi</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Heinze</foaf:surname>
                        <foaf:givenName>Thomas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_190"/>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://ieeexplore.ieee.org/document/7930015/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>659-670</bib:pages>
        <dc:date>4/2017</dc:date>
        <dcterms:dateSubmitted>2020-08-31 08:13:09</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>2017 IEEE 33rd International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Driven by the rapidly increasing demand for handling real-time data streams, many data stream processing (DSP) systems have been proposed. Regardless of the different architectures of those DSP systems, they are mostly aiming at scaling out using a cluster of commodity machines and built around a number of key design aspects: a) pipelined processing with message passing, b) on-demand data parallelism, and c) JVM based implementation. However, there lacks a study on those key design aspects on modern scale-up architectures, where more CPU cores are being put on the same die, and the onchip cache hierarchies are getting larger, deeper, and complex. Multiple sockets bring non-uniform memory access (NUMA) effort. In this paper, we revisit the aforementioned design aspects on a modern scale-up server. Speciﬁcally, we use a series of applications as micro benchmark to conduct detailed proﬁling studies on Apache Storm and Flink. From the proﬁling results, we observe two major performance issues: a) the massively parallel execution model causes serious front-end stalls, which are a major performance bottleneck issue on a single CPU socket, b) the lack of NUMA-aware mechanism causes major drawback on the scalability of DSP systems on multi-socket architectures. Addressing these issues should allow DSP systems to exploit modern scale-up architectures, which also beneﬁts scaling out environments. We present our initial efforts on resolving the above-mentioned performance issues, which have shown up to 3.2x and 3.1x improvement on the performance of Storm and Flink, respectively.</dcterms:abstract>
        <dc:title>Revisiting the Design of Data Stream Processing Systems on Multi-Core Processors</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_190">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://www.comp.nus.edu.sg/~hebs/pub/shuhaoICDE17a.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:13:06</dcterms:dateSubmitted>
        <dc:title>Zhang et al. - 2017 - Revisiting the Design of Data Stream Processing Sy.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="urn:isbn:978-1-72812-903-7">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-72812-903-7</dc:identifier>
                <dc:identifier>DOI 10.1109/ICDE48307.2020.00136</dc:identifier>
                <dc:title>2020 IEEE 36th International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Dallas, TX, USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>IEEE</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Shuhao</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Wu</foaf:surname>
                        <foaf:givenName>Yingjun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zhang</foaf:surname>
                        <foaf:givenName>Feng</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>He</foaf:surname>
                        <foaf:givenName>Bingsheng</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_191"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://ieeexplore.ieee.org/document/9101749/</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>1537-1548</bib:pages>
        <dc:date>4/2020</dc:date>
        <dcterms:dateSubmitted>2020-08-31 08:11:27</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>2020 IEEE 36th International Conference on Data Engineering (ICDE)</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dcterms:abstract>Recent data stream processing systems (DSPSs) can achieve excellent performance when processing large volumes of data under tight latency constraints. However, they sacriﬁce support for concurrent state access that eases the burden of developing stateful stream applications. Recently, some have proposed managing concurrent state access during stream processing by modeling state accesses as transactions. However, these are realized with locks involving serious contention overhead. The coarse-grained processing paradigm adopted in these proposals magnify contention issues and does not exploit modern multicore architectures to their full potential. This paper introduces TStream, a novel DSPS supporting efﬁcient concurrent state access on multicore processors. Transactional semantics is employed like previous work, but scalability is greatly improved due to two novel designs: 1) dual-mode scheduling, which exposes more parallelism opportunities, 2) dynamic restructuring execution, which aggressively exploits the parallelism opportunities from dual-mode scheduling without centralized lock contentions. To validate our proposal, we evaluate TStream with a benchmark of four applications on a modern multicore machine. Experimental results show that 1) TStream achieves up to 4.8 times higher throughput with similar processing latency compared to the state-of-the-art and 2) unlike prior solutions, TStream is highly tolerant of varying application workloads such as key skewness and multi-partition state accesses.</dcterms:abstract>
        <dc:title>Towards Concurrent Stateful Stream Processing on Multicore Processors</dc:title>
    </rdf:Description>
    <z:Attachment rdf:about="#item_191">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://shuhaozhangtony.github.io/docs/tstream.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:11:25</dcterms:dateSubmitted>
        <dc:title>Zhang et al. - 2020 - Towards Concurrent Stateful Stream Processing on M.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://arxiv.org/abs/1903.00452">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal><dc:title>arXiv:1903.00452 [cs]</dc:title></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Shahvarani</foaf:surname>
                        <foaf:givenName>Amirhesam</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Jacobsen</foaf:surname>
                        <foaf:givenName>Hans-Arno</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_193"/>
        <link:link rdf:resource="#item_192"/>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Computer Science - Databases</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://arxiv.org/abs/1903.00452</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dc:date>2019-03-01</dc:date>
        <dc:description>arXiv: 1903.00452</dc:description>
        <dcterms:dateSubmitted>2020-08-31 08:10:09</dcterms:dateSubmitted>
        <z:libraryCatalog>arXiv.org</z:libraryCatalog>
        <dcterms:abstract>There is increasing interest in using multicore processors to accelerate stream processing. For example, indexing sliding window content to enhance the performance of streaming queries is greatly improved by utilizing the computational capabilities of a multicore processor. However, designing an effective concurrency control mechanism that addresses the problem of concurrent indexing in highly dynamic settings remains a challenge. In this paper, we introduce an index data structure, called the Partitioned In-memory Merge-Tree, to address the challenges that arise when indexing highly dynamic data, which are common in streaming settings. To complement the index, we design an algorithm to realize a parallel index-based stream join that exploits the computational power of multicore processors. Our experiments using an octa-core processor show that our parallel stream join achieves up to 5.5 times higher throughput than a single-threaded approach.</dcterms:abstract>
        <dc:title>Parallel Index-based Stream Join on a Multicore CPU</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_193">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/pdf/1903.00452.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:10:15</dcterms:dateSubmitted>
        <dc:title>arXiv Fulltext PDF</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <z:Attachment rdf:about="#item_192">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/abs/1903.00452</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:10:16</dcterms:dateSubmitted>
        <dc:title>arXiv.org Snapshot</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <bib:Article rdf:about="http://arxiv.org/abs/2008.00842">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
           <bib:Journal><dc:title>arXiv:2008.00842 [cs]</dc:title></bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Fragkoulis</foaf:surname>
                        <foaf:givenName>Marios</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Carbone</foaf:surname>
                        <foaf:givenName>Paris</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Kalavri</foaf:surname>
                        <foaf:givenName>Vasiliki</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Katsifodimos</foaf:surname>
                        <foaf:givenName>Asterios</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <dcterms:isReferencedBy rdf:resource="#item_196"/>
        <link:link rdf:resource="#item_195"/>
        <link:link rdf:resource="#item_194"/>
        <dc:subject>
            <z:AutomaticTag>
                <rdf:value>Computer Science - Distributed, Parallel, and Cluster Computing</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Computer Science - Databases</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Computer Science - Computation and Language</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:subject>
            <z:AutomaticTag>
               <rdf:value>Computer Science - Performance</rdf:value>
            </z:AutomaticTag>
        </dc:subject>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>http://arxiv.org/abs/2008.00842</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dc:date>2020-08-03</dc:date>
        <dc:description>arXiv: 2008.00842</dc:description>
        <dcterms:dateSubmitted>2020-08-31 08:06:21</dcterms:dateSubmitted>
        <z:libraryCatalog>arXiv.org</z:libraryCatalog>
        <dcterms:abstract>Stream processing has been an active research field for more than 20 years, but it is now witnessing its prime time due to recent successful efforts by the research community and numerous worldwide open-source communities. This survey provides a comprehensive overview of fundamental aspects of stream processing systems and their evolution in the functional areas of out-of-order data management, state management, fault tolerance, high availability, load management, elasticity, and reconfiguration. We review noteworthy past research findings, outline the similarities and differences between early ('00-'10) and modern ('11-'18) streaming systems, and discuss recent trends and open problems.</dcterms:abstract>
        <dc:title>A Survey on the Evolution of Stream Processing Systems</dc:title>
    </bib:Article>
    <bib:Memo rdf:about="#item_196">
       <rdf:value>Comment: 34 pages, 15 figures, 5 tables</rdf:value>
    </bib:Memo>
    <z:Attachment rdf:about="#item_195">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/pdf/2008.00842.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:06:32</dcterms:dateSubmitted>
        <dc:title>arXiv Fulltext PDF</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <z:Attachment rdf:about="#item_194">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
               <rdf:value>https://arxiv.org/abs/2008.00842</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:06:35</dcterms:dateSubmitted>
        <dc:title>arXiv.org Snapshot</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>text/html</link:type>
    </z:Attachment>
    <rdf:Description rdf:about="https://dl.acm.org/doi/10.1145/3318464.3389723">
        <z:itemType>conferencePaper</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <dc:identifier>ISBN 978-1-4503-6735-6</dc:identifier>
                <dc:identifier>DOI 10.1145/3318464.3389723</dc:identifier>
                <dc:title>Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data</dc:title>
            </bib:Journal>
        </dcterms:isPartOf>
        <dc:publisher>
            <foaf:Organization>
                <vcard:adr>
                    <vcard:Address>
                       <vcard:locality>Portland OR USA</vcard:locality>
                    </vcard:Address>
                </vcard:adr>
                <foaf:name>ACM</foaf:name>
            </foaf:Organization>
        </dc:publisher>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Del Monte</foaf:surname>
                        <foaf:givenName>Bonaventura</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zeuch</foaf:surname>
                        <foaf:givenName>Steffen</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rabl</foaf:surname>
                        <foaf:givenName>Tilmann</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_197"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>https://dl.acm.org/doi/10.1145/3318464.3389723</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>2471-2486</bib:pages>
        <dc:date>2020-06-11</dc:date>
        <dcterms:dateSubmitted>2020-08-31 08:04:44</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <bib:presentedAt>
            <bib:Conference>
                <dc:title>SIGMOD/PODS '20: International Conference on Management of Data</dc:title>
            </bib:Conference>
        </bib:presentedAt>
        <z:language>en</z:language>
        <dc:title>Rhino: Efficient Management of Very Large Distributed State for Stream Processing Engines</dc:title>
        <z:shortTitle>Rhino</z:shortTitle>
    </rdf:Description>
    <z:Attachment rdf:about="#item_197">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://www.redaktion.tu-berlin.de/fileadmin/fg131/Publikation/Papers/DelMonte_SIGMOD-2020_preprint.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-08-31 08:04:29</dcterms:dateSubmitted>
        <dc:title>Del Monte et al. - 2020 - Rhino Efficient Management of Very Large Distribu.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <bib:Article rdf:about="#item_199">
        <z:itemType>journalArticle</z:itemType>
        <dcterms:isPartOf>
            <bib:Journal>
                <prism:volume>12</prism:volume>
                <prism:number>5</prism:number>
                <dc:title>Proceedings of the VLDB Endowment</dc:title>
                <dc:identifier>ISSN 21508097</dc:identifier>
                <dcterms:alternative>Proc. VLDB Endow.</dcterms:alternative>
                <dc:identifier>DOI 10.14778/3303753.3303758</dc:identifier>
            </bib:Journal>
        </dcterms:isPartOf>
        <bib:authors>
            <rdf:Seq>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Zeuch</foaf:surname>
                        <foaf:givenName>Steffen</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Monte</foaf:surname>
                        <foaf:givenName>Bonaventura Del</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Karimov</foaf:surname>
                        <foaf:givenName>Jeyhun</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Lutz</foaf:surname>
                        <foaf:givenName>Clemens</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Renz</foaf:surname>
                        <foaf:givenName>Manuel</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Traub</foaf:surname>
                        <foaf:givenName>Jonas</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Breß</foaf:surname>
                        <foaf:givenName>Sebastian</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Rabl</foaf:surname>
                        <foaf:givenName>Tilmann</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
                <rdf:li>
                    <foaf:Person>
                        <foaf:surname>Markl</foaf:surname>
                        <foaf:givenName>Volker</foaf:givenName>
                    </foaf:Person>
                </rdf:li>
            </rdf:Seq>
        </bib:authors>
        <link:link rdf:resource="#item_198"/>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://dl.acm.org/citation.cfm?doid=3303753.3316441</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <bib:pages>516-530</bib:pages>
        <dc:date>2019-01-01</dc:date>
        <dcterms:dateSubmitted>2020-09-06 06:38:45</dcterms:dateSubmitted>
        <z:libraryCatalog>DOI.org (Crossref)</z:libraryCatalog>
        <z:language>en</z:language>
        <dcterms:abstract>Modern Stream Processing Engines (SPEs) process large data volumes under tight latency constraints. Many SPEs execute processing pipelines using message passing on sharednothing architectures and apply a partition-based scale-out strategy to handle high-velocity input streams. Furthermore, many state-of-the-art SPEs rely on a Java Virtual Machine to achieve platform independence and speed up system development by abstracting from the underlying hardware. In this paper, we show that taking the underlying hardware into account is essential to exploit modern hardware eﬃciently. To this end, we conduct an extensive experimental analysis of current SPEs and SPE design alternatives optimized for modern hardware. Our analysis highlights potential bottlenecks and reveals that state-of-the-art SPEs are not capable of fully exploiting current and emerging hardware trends, such as multi-core processors and high-speed networks. Based on our analysis, we describe a set of design changes to the common architecture of SPEs to scale-up on modern hardware. We show that the single-node throughput can be increased by up to two orders of magnitude compared to state-of-the-art SPEs by applying specialized code generation, fusing operators, batch-style parallelization strategies, and optimized windowing. This speedup allows for deploying typical streaming applications on a single or a few nodes instead of large clusters.</dcterms:abstract>
        <dc:title>Analyzing efficient stream processing on modern hardware</dc:title>
    </bib:Article>
    <z:Attachment rdf:about="#item_198">
        <z:itemType>attachment</z:itemType>
        <dc:identifier>
            <dcterms:URI>
                <rdf:value>http://www.vldb.org/pvldb/vol12/p516-zeuch.pdf</rdf:value>
            </dcterms:URI>
        </dc:identifier>
        <dcterms:dateSubmitted>2020-09-06 06:38:31</dcterms:dateSubmitted>
        <dc:title>Zeuch 等。 - 2019 - Analyzing efficient stream processing on modern ha.pdf</dc:title>
        <z:linkMode>1</z:linkMode>
        <link:type>application/pdf</link:type>
    </z:Attachment>
    <z:Collection rdf:about="#collection_19">
        <dc:title>benchmarking</dc:title>
        <dcterms:hasPart rdf:resource="http://arxiv.org/abs/1802.08496"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_3">
        <dc:title>dynamic scaling</dc:title>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=3137765.3137786"/>
        <dcterms:hasPart rdf:resource="#item_15"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=3132747.3132750"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-2037-5"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-4404-3"/>
        <dcterms:hasPart rdf:resource="#item_133"/>
        <dcterms:hasPart rdf:resource="https://dl.acm.org/doi/10.1145/3318464.3389723"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_2">
        <dc:title>load balancing</dc:title>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-2758-9"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-0-7803-7665-6"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2735508.2735514"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-0-7695-2285-2"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-5090-2020-1"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4799-7964-6"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-3531-7"/>
        <dcterms:hasPart rdf:resource="https://ieeexplore.ieee.org/document/8691781/"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=3137628.3137639"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_5">
        <dc:title>state migration</dc:title>
        <dcterms:hasPart rdf:resource="#item_21"/>
        <dcterms:hasPart rdf:resource="#item_22"/>
        <dcterms:hasPart rdf:resource="#item_23"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-58113-859-7"/>
        <dcterms:hasPart rdf:resource="http://ieeexplore.ieee.org/document/7113328/"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=3303753.3316441"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-5643-5"/>
        <dcterms:hasPart rdf:resource="#item_67"/>
        <dcterms:hasPart rdf:resource="#item_73"/>
        <dcterms:hasPart rdf:resource="https://www.infoworld.com/article/3293426/how-to-build-stateful-streaming-applications-with-apache-flink.html"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=3329772.3342044"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-1758-0"/>
        <dcterms:hasPart rdf:resource="https://linkinghub.elsevier.com/retrieve/pii/S0164121214002556"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2735471.2735475"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-2388-8"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_7">
        <dc:title>streaming for AI</dc:title>
        <dcterms:hasPart rdf:resource="#item_74"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_6">
        <dc:title>streaming general</dc:title>
        <dcterms:hasPart rdf:resource="#item_44"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=3299869.3319868"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-5085-3"/>
        <dcterms:hasPart rdf:resource="https://linkinghub.elsevier.com/retrieve/pii/S1084804517303971"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2732977.2732989"/>
        <dcterms:hasPart rdf:resource="#item_59"/>
        <dcterms:hasPart rdf:resource="http://link.springer.com/10.1007/s00778-018-0514-9"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-2737-4"/>
        <dcterms:hasPart rdf:resource="#item_62"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2882903.2882906"/>
        <dcterms:hasPart rdf:resource="#item_64"/>
        <dcterms:hasPart rdf:resource="#item_65"/>
        <dcterms:hasPart rdf:resource="http://link.springer.com/10.1007/s00287-019-01206-w"/>
        <dcterms:hasPart rdf:resource="#item_108"/>
        <dcterms:hasPart rdf:resource="#item_164"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-6735-6"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_16">
        <dc:title>streaming join</dc:title>
        <dcterms:hasPart rdf:resource="#item_138"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2732939.2732944"/>
        <dcterms:hasPart rdf:resource="#item_140"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-0-7695-2065-0"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2723372.2746485"/>
        <dcterms:hasPart rdf:resource="http://dl.acm.org/citation.cfm?doid=2882903.2915235"/>
        <dcterms:hasPart rdf:resource="#item_144"/>
        <dcterms:hasPart rdf:resource="http://arxiv.org/abs/1903.00452"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_17">
        <dc:title>streaming on hardware</dc:title>
        <dcterms:hasPart rdf:resource="#item_167"/>
        <dcterms:hasPart rdf:resource="#item_199"/>
    </z:Collection>
    <z:Collection rdf:about="#collection_20">
        <dc:title>survey</dc:title>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-5090-6543-1"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-72812-903-7"/>
        <dcterms:hasPart rdf:resource="urn:isbn:978-1-4503-6735-6"/>
        <dcterms:hasPart rdf:resource="#item_164"/>
        <dcterms:hasPart rdf:resource="https://linkinghub.elsevier.com/retrieve/pii/S1084804517303971"/>
        <dcterms:hasPart rdf:resource="http://link.springer.com/10.1007/s00778-018-0514-9"/>
        <dcterms:hasPart rdf:resource="#item_65"/>
    </z:Collection>
</rdf:RDF>
